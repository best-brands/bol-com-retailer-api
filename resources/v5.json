{
  "swagger": "2.0",
  "host": "api.bol.com",
  "schemes": [
    "https"
  ],
  "info": {
    "description": "The bol.com API for Retailers.",
    "version": "5.0",
    "title": "v5"
  },
  "tags": [
    {
      "name": "BETA"
    },
    {
      "name": "Commissions"
    },
    {
      "name": "Insights"
    },
    {
      "name": "Inventory"
    },
    {
      "name": "Invoices"
    },
    {
      "name": "Offers"
    },
    {
      "name": "Orders"
    },
    {
      "name": "Process status"
    },
    {
      "name": "Product Content"
    },
    {
      "name": "Replenishments"
    },
    {
      "name": "Returns"
    },
    {
      "name": "Shipments"
    },
    {
      "name": "Shipping Labels"
    },
    {
      "name": "Subscriptions"
    },
    {
      "name": "Transports"
    }
  ],
  "paths": {
    "/retailer/commission": {
      "post": {
        "tags": [
          "Commissions"
        ],
        "summary": "Get all commissions and reductions by EAN in bulk",
        "description": "Gets all commissions and possible reductions by EAN, price, and optionally condition.",
        "operationId": "get-commissions",
        "consumes": [
          "application/vnd.retailer.v5+json"
        ],
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BulkCommissionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok: Successfully processed the request.",
            "schema": {
              "$ref": "#/definitions/BulkCommissionResponse"
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          },
          "404": {
            "description": "Not found: The requested item could not be found.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/commission/{ean}": {
      "get": {
        "tags": [
          "Commissions"
        ],
        "summary": "Get all commissions and reductions by EAN per single EAN",
        "description": "Commissions can be filtered by condition, which defaults to NEW. We will calculate the commission amount from the EAN and price.",
        "operationId": "get-commission",
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "name": "ean",
            "in": "path",
            "description": "The EAN number associated with this product.",
            "required": true,
            "type": "string",
            "x-example": "0000007740404"
          },
          {
            "name": "condition",
            "in": "query",
            "description": "The condition of the offer.",
            "required": false,
            "type": "string",
            "default": "NEW",
            "enum": [
              "NEW",
              "AS_NEW",
              "GOOD",
              "REASONABLE",
              "MODERATE"
            ]
          },
          {
            "name": "unit-price",
            "in": "query",
            "description": "The price of the product with a period as a decimal separator. The price should always have two decimals precision.",
            "required": true,
            "type": "number",
            "x-example": 59.0
          }
        ],
        "responses": {
          "200": {
            "description": "Ok: Successfully processed the request.",
            "schema": {
              "$ref": "#/definitions/Commission"
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          },
          "404": {
            "description": "Not found: The requested item could not be found.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/content/product": {
      "post": {
        "tags": [
          "Product Content"
        ],
        "summary": "Post product content",
        "description": "Create content for existing products or new products.",
        "operationId": "post-product-content",
        "consumes": [
          "application/vnd.retailer.v5+json"
        ],
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateProductContentRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted: Successfully scheduled the request for processing.",
            "schema": {
              "$ref": "#/definitions/ProcessStatus"
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/content/validation-report/{uploadId}": {
      "get": {
        "tags": [
          "Product Content"
        ],
        "summary": "Get validation report",
        "description": "Retrieve a validation report of the product content upload based on the upload id.",
        "operationId": "get-validation-report",
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "name": "uploadId",
            "in": "path",
            "description": "The identifier of the product content upload.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok: Successfully processed the request.",
            "schema": {
              "$ref": "#/definitions/ValidationReportResponse"
            }
          },
          "404": {
            "description": "Not found: The requested item could not be found.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/insights/offer": {
      "get": {
        "tags": [
          "Insights"
        ],
        "summary": "Get offer insights",
        "description": "Get the product visits and the buy box percentage for an offer during a given period.",
        "operationId": "get-offer-insights",
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "name": "offer-id",
            "in": "query",
            "description": "Unique identifier for an offer.",
            "required": true,
            "type": "string"
          },
          {
            "name": "period",
            "in": "query",
            "description": "The time unit in which the offer insights are grouped.",
            "required": true,
            "type": "string",
            "enum": [
              "DAY",
              "WEEK",
              "MONTH"
            ]
          },
          {
            "name": "number-of-periods",
            "in": "query",
            "description": "The number of periods for which the offer insights are requested back in time.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the requested offer insight.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "PRODUCT_VISITS",
                "BUY_BOX_PERCENTAGE"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok: Successfully processed the request.",
            "schema": {
              "$ref": "#/definitions/OfferInsights"
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/insights/performance/indicator": {
      "get": {
        "tags": [
          "Insights"
        ],
        "summary": "Get performance indicators",
        "description": "Gets the measurements for your performance indicators per week.",
        "operationId": "get-performance-indicator",
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The type of the performance indicator",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "CANCELLATIONS",
                "FULFILMENT",
                "PHONE_AVAILABILITY",
                "RESPONSE_TIME",
                "CASE_ITEM_RATIO",
                "TRACK_AND_TRACE",
                "RETURNS",
                "REVIEWS"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "year",
            "in": "query",
            "description": "Year number in the ISO-8601 standard.",
            "required": true,
            "type": "string"
          },
          {
            "name": "week",
            "in": "query",
            "description": "Week number in the ISO-8601 standard. If you would like to get the relative scores from the current week, please provide the current week number here. Be advised that measurements can change heavily over the course of the week.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok: Successfully processed the request.",
            "schema": {
              "$ref": "#/definitions/PerformanceIndicators"
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/insights/sales-forecast": {
      "get": {
        "tags": [
          "Insights"
        ],
        "summary": "Get sales forecast",
        "description": "Get sales forecast to estimate the sales expectations on the total bol.com platform for the requested number of weeks ahead.",
        "operationId": "get-sales-forecast",
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "name": "offer-id",
            "in": "query",
            "description": "Unique identifier for an offer.",
            "required": true,
            "type": "string"
          },
          {
            "name": "weeks-ahead",
            "in": "query",
            "description": "The number of weeks into the future, starting from today.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok: Successfully processed the request.",
            "schema": {
              "$ref": "#/definitions/SalesForecastResponse"
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/insights/search-terms": {
      "get": {
        "tags": [
          "Insights"
        ],
        "summary": "Get search terms",
        "description": "Retrieves the search volume for a specified search term and period. The search volume allows you to see what bol.com customers are searching for. Based on the search volume per search term you can optimize your product content, or spot opportunities to extend your assortment, or analyzing trends for inventory management.",
        "operationId": "get-search-terms",
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "name": "search-term",
            "in": "query",
            "description": "The search term for which you want to request the search volume.",
            "required": true,
            "type": "string"
          },
          {
            "name": "period",
            "in": "query",
            "description": "The time unit in which the offer insights are grouped.",
            "required": true,
            "type": "string",
            "enum": [
              "DAY",
              "WEEK",
              "MONTH"
            ]
          },
          {
            "name": "number-of-periods",
            "in": "query",
            "description": "The number of periods for which the offer insights are requested back in time.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "related-search-terms",
            "in": "query",
            "description": "Indicates whether or not you want to retrieve the related search terms.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Ok: Successfully processed the request.",
            "schema": {
              "$ref": "#/definitions/SearchTerms"
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/inventory": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get LVB/FBB inventory",
        "description": "The inventory endpoint is a specific LVB/FBB endpoint. It provides a paginated list containing your fulfilment by bol.com inventory. This endpoint does not provide information about your own stock.",
        "operationId": "get-inventory",
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The requested page number with a page size of 50 items.",
            "required": false,
            "type": "integer",
            "default": 1,
            "minimum": 1,
            "format": "int32",
            "x-example": 1
          },
          {
            "name": "quantity",
            "in": "query",
            "description": "Filter inventory by providing a range of quantity (min-range)-(max-range). Note that if no state query is submitted in the same request, then the quantity will be filtered on regularStock by default.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "x-example": "0-10,20-30"
          },
          {
            "name": "stock",
            "in": "query",
            "description": "Filter inventory by stock level.",
            "required": false,
            "type": "string",
            "x-example": "SUFFICIENT",
            "enum": [
              "SUFFICIENT",
              "INSUFFICIENT"
            ]
          },
          {
            "name": "state",
            "in": "query",
            "description": "Filter inventory by stock type.",
            "required": false,
            "type": "string",
            "x-example": "REGULAR",
            "enum": [
              "REGULAR",
              "GRADED"
            ]
          },
          {
            "name": "query",
            "in": "query",
            "description": "Filter inventory by EAN or product title.",
            "required": false,
            "type": "string",
            "x-example": "0000007740404"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok: Successfully processed the request.",
            "schema": {
              "$ref": "#/definitions/InventoryResponse"
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/invoices": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Get all invoices",
        "description": "Gets a list of invoices, by default from the past 4 weeks. The optional period-start-date and period-end-date-date parameters can be used together to retrieve invoices from a specific date range in the past, the period can be no longer than 31 days. Invoices and their specifications can be downloaded separately in different media formats with the ‘GET an invoice by id’ and the ‘GET an invoice specification by id’ calls. The available media types differ per invoice and are listed per invoice within the response. Note: the media types listed in the response must be given in our standard API format.",
        "operationId": "get-invoices",
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "name": "period-start-date",
            "in": "query",
            "description": "Period start date in ISO 8601 standard.",
            "required": false,
            "type": "string",
            "x-example": "2019-03-01"
          },
          {
            "name": "period-end-date",
            "in": "query",
            "description": "Period end date in ISO 8601 standard.",
            "required": false,
            "type": "string",
            "x-example": "2019-03-31"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok: Successfully processed the request.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "byte"
              }
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/invoices/{invoice-id}": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Get an invoice by invoice id",
        "description": "Gets an invoice by invoice id. The available media types differ per invoice and are listed within the response from the ‘GET all invoices’ call. Note: the media types listed in the response must be given in our standard API format.",
        "operationId": "get-invoice",
        "produces": [
          "application/vnd.retailer.v5+json",
          "application/vnd.retailer.v5+pdf"
        ],
        "parameters": [
          {
            "name": "invoice-id",
            "in": "path",
            "description": "The id of the invoice",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok: Successfully processed the request.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "byte"
              }
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/invoices/{invoice-id}/specification": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Get an invoice specification by invoice id",
        "description": "Gets an invoice specification for an invoice with a paginated list of its transactions. The available media types differ per invoice specification and are listed within the response from the ‘GET all invoices’ call. Note, the media types listed in the response must be given in our standard API format.",
        "operationId": "get-invoice-specification",
        "produces": [
          "application/vnd.retailer.v5+json",
          "application/vnd.retailer.v5+pdf",
          "application/vnd.retailer.v5+openxmlformats-officedocument.spreadsheetml.sheet"
        ],
        "parameters": [
          {
            "name": "invoice-id",
            "in": "path",
            "description": "The id of the invoice.",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page to get, defaults to page 1. Each page contains a maximum of 25,000 lines.",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok: Successfully processed the request.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "byte"
              }
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/offers": {
      "post": {
        "tags": [
          "Offers"
        ],
        "summary": "Create a new offer",
        "description": "Creates a new offer, and adds it to the catalog. After creation, status information can be retrieved to review if the offer is valid and published to the shop.",
        "operationId": "post-offer",
        "consumes": [
          "application/vnd.retailer.v5+json"
        ],
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateOfferRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted: Successfully scheduled the request for processing.",
            "schema": {
              "$ref": "#/definitions/ProcessStatus"
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/offers/export": {
      "post": {
        "tags": [
          "Offers"
        ],
        "summary": "Request an offer export file",
        "description": "Request an offer export file containing all offers.",
        "operationId": "post-offer-export",
        "consumes": [
          "application/vnd.retailer.v5+json"
        ],
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateOfferExportRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted: Successfully scheduled the request for processing.",
            "schema": {
              "$ref": "#/definitions/ProcessStatus"
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/offers/export/{report-id}": {
      "get": {
        "tags": [
          "Offers"
        ],
        "summary": "Retrieve an offer export file by offer export id",
        "description": "Retrieve an offer export file containing all offers.",
        "operationId": "get-offer-export",
        "produces": [
          "application/vnd.retailer.v5+csv"
        ],
        "parameters": [
          {
            "name": "report-id",
            "in": "path",
            "description": "Unique identifier for an offer export report.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok: Successfully processed the request."
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          },
          "404": {
            "description": "Not found: The requested item could not be found.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/offers/unpublished": {
      "post": {
        "tags": [
          "Offers",
          "BETA"
        ],
        "summary": "BETA: Request an unpublished offer report",
        "description": "Request an unpublished offer report containing all unpublished offers and reasons.",
        "operationId": "post-unpublished-offer-report",
        "consumes": [
          "application/vnd.retailer.v5+json"
        ],
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateUnpublishedOfferReportRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted: Successfully scheduled the request for processing.",
            "schema": {
              "$ref": "#/definitions/ProcessStatus"
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/offers/unpublished/{report-id}": {
      "get": {
        "tags": [
          "Offers",
          "BETA"
        ],
        "summary": "BETA: Retrieve an unpublished offer report by report id",
        "description": "Retrieve an unpublished offer report containing all unpublished offers and reasons.",
        "operationId": "get-unpublished-offer-report",
        "produces": [
          "application/vnd.retailer.v5+csv"
        ],
        "parameters": [
          {
            "name": "report-id",
            "in": "path",
            "description": "Unique identifier for unpublished offer report.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok: Successfully processed the request."
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          },
          "404": {
            "description": "Not found: The requested item could not be found.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/offers/{offer-id}": {
      "get": {
        "tags": [
          "Offers"
        ],
        "summary": "Retrieve an offer by its offer id",
        "description": "Retrieve an offer by using the offer id provided to you when creating or listing your offers.",
        "operationId": "get-offer",
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "name": "offer-id",
            "in": "path",
            "description": "Unique identifier for an offer.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok: Successfully processed the request.",
            "schema": {
              "$ref": "#/definitions/RetailerOffer"
            }
          },
          "404": {
            "description": "Not found: The requested item could not be found.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Offers"
        ],
        "summary": "Update an offer",
        "description": "Use this endpoint to send an offer update. This endpoint returns a process status.",
        "operationId": "put-offer",
        "consumes": [
          "application/vnd.retailer.v5+json"
        ],
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "name": "offer-id",
            "in": "path",
            "description": "Unique identifier for an offer.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UpdateOfferRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted: Successfully scheduled the request for processing.",
            "schema": {
              "$ref": "#/definitions/ProcessStatus"
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Offers"
        ],
        "summary": "Delete offer by id",
        "description": "Delete an offer by id.",
        "operationId": "delete-offer",
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "name": "offer-id",
            "in": "path",
            "description": "Unique identifier for an offer.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted: Successfully scheduled the request for processing.",
            "schema": {
              "$ref": "#/definitions/ProcessStatus"
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/offers/{offer-id}/price": {
      "put": {
        "tags": [
          "Offers"
        ],
        "summary": "Update price(s) for offer by id",
        "description": "Update price(s) for offer by id.",
        "operationId": "update-offer-price",
        "consumes": [
          "application/vnd.retailer.v5+json"
        ],
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "name": "offer-id",
            "in": "path",
            "description": "Unique identifier for an offer.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UpdateOfferPriceRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted: Successfully scheduled the request for processing.",
            "schema": {
              "$ref": "#/definitions/ProcessStatus"
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/offers/{offer-id}/stock": {
      "put": {
        "tags": [
          "Offers"
        ],
        "summary": "Update stock for offer by id",
        "description": "Update stock for offer by id.",
        "operationId": "update-offer-stock",
        "consumes": [
          "application/vnd.retailer.v5+json"
        ],
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "name": "offer-id",
            "in": "path",
            "description": "Unique identifier for an offer.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UpdateOfferStockRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted: Successfully scheduled the request for processing.",
            "schema": {
              "$ref": "#/definitions/ProcessStatus"
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/orders": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get orders",
        "description": "Gets a paginated list of all orders sorted by date in descending order. To create a pick list you can set state to open.",
        "operationId": "get-orders",
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The requested page number with a page size of 50 items.",
            "required": false,
            "type": "integer",
            "default": 1,
            "minimum": 1,
            "format": "int32"
          },
          {
            "name": "fulfilment-method",
            "in": "query",
            "description": "The fulfilment method. Fulfilled by the retailer (FBR) or fulfilled by bol.com (FBB).",
            "required": false,
            "type": "string",
            "default": "FBR",
            "enum": [
              "FBR",
              "FBB"
            ]
          },
          {
            "name": "status",
            "in": "query",
            "description": "Determines whether you want to retrieve orders including or excluding shipped and/or cancelled items.",
            "required": false,
            "type": "string",
            "default": "OPEN",
            "enum": [
              "OPEN",
              "ALL"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Ok: Successfully processed the request.",
            "schema": {
              "$ref": "#/definitions/ReducedOrders"
            }
          }
        }
      }
    },
    "/retailer/orders/cancellation": {
      "put": {
        "tags": [
          "Orders"
        ],
        "summary": "Cancel an order item by an order item id",
        "description": "This endpoint can be used to either confirm a cancellation request by the customer or to cancel an order item you yourself are unable to fulfil.",
        "operationId": "cancel-order-item",
        "consumes": [
          "application/vnd.retailer.v5+json"
        ],
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CancelOrderItemsRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted: Successfully scheduled the request for processing.",
            "schema": {
              "$ref": "#/definitions/ProcessStatus"
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/orders/shipment": {
      "put": {
        "tags": [
          "Orders"
        ],
        "summary": "Ship order item",
        "description": "Ship a single order item within a customer order by providing shipping information. In case you purchased a shipping label you can add the shippingLabelId to this message; in that case the transport element must be left empty. If you ship the item(s) using your own transporter method you must omit the shippingLabelId entirely.",
        "operationId": "ship-order-item",
        "consumes": [
          "application/vnd.retailer.v5+json"
        ],
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ShipmentRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted: Successfully scheduled the request for processing.",
            "schema": {
              "$ref": "#/definitions/ProcessStatus"
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/orders/{order-id}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get order",
        "description": "Gets an order by order id. The order can be partially shipped or cancelled, the message contains the quantity shipped or cancelled items.",
        "operationId": "get-order",
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "name": "order-id",
            "in": "path",
            "description": "The id of the order to get.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok: Successfully processed the request.",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "404": {
            "description": "Not found: The requested item could not be found.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/process-status": {
      "get": {
        "tags": [
          "Process status"
        ],
        "summary": "Gets the status of an asynchronous process by entity id and event type for a retailer",
        "description": "Retrieve a list of process statuses, which shows information regarding previously executed PUT/POST/DELETE requests in descending order. You need to supply an entity id and event type.Please note: process status instances are only retained for a limited period of time after completion. Outside of this period, deleted process statuses will no longer be returned. Please handle this accordingly, by stopping any active polling for these statuses.",
        "operationId": "get-process-status-entity-id",
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "name": "entity-id",
            "in": "query",
            "description": "The entity id is not unique so you need to provide an event type. The entity id can either be order item id, transport id, return number or inbound reference.",
            "required": true,
            "type": "string",
            "x-example": "987654321"
          },
          {
            "name": "event-type",
            "in": "query",
            "description": "The event type can only be used in combination with the entity id.",
            "required": true,
            "type": "string",
            "x-example": "CONFIRM_SHIPMENT",
            "enum": [
              "CONFIRM_SHIPMENT",
              "CANCEL_ORDER",
              "CHANGE_TRANSPORT",
              "HANDLE_RETURN_ITEM",
              "CREATE_RETURN_ITEM",
              "CREATE_INBOUND",
              "DELETE_OFFER",
              "CREATE_OFFER",
              "UPDATE_OFFER",
              "UPDATE_OFFER_STOCK",
              "UPDATE_OFFER_PRICE",
              "CREATE_OFFER_EXPORT",
              "UNPUBLISHED_OFFER_REPORT",
              "CREATE_PRODUCT_CONTENT",
              "CREATE_SUBSCRIPTION",
              "UPDATE_SUBSCRIPTION",
              "DELETE_SUBSCRIPTION",
              "SEND_SUBSCRIPTION_TST_MSG",
              "CREATE_SHIPPING_LABEL"
            ]
          },
          {
            "name": "page",
            "in": "query",
            "description": "The requested page number with a page size of 50 items.",
            "required": false,
            "type": "integer",
            "default": 1,
            "minimum": 1,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok: Successfully processed the request.",
            "schema": {
              "$ref": "#/definitions/ProcessStatusResponse"
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Process status"
        ],
        "summary": "Gets the status of multiple asynchronous processes by an array of process status ids for a retailer",
        "description": "Retrieve a list of process statuses, which shows information regarding previously executed PUT/POST/DELETE requests. No more than 1000 process status id's can be sent in a single request.Please note: process status instances are only retained for a limited period of time after completion. Outside of this period, deleted process statuses will no longer be returned. Please handle this accordingly, by stopping any active polling for these statuses.",
        "operationId": "get-process-status-bulk",
        "consumes": [
          "application/vnd.retailer.v5+json"
        ],
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BulkProcessStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok: Successfully processed the request.",
            "schema": {
              "$ref": "#/definitions/ProcessStatusResponse"
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/process-status/{process-status-id}": {
      "get": {
        "tags": [
          "Process status"
        ],
        "summary": "Get the status of an asynchronous process by process status id",
        "description": "Retrieve a specific process-status, which shows information regarding a previously executed PUT/POST/DELETE request. All PUT/POST/DELETE requests on the other endpoints will supply a process-status-id in the related response. You can use this id to retrieve a status by using the endpoint below. Please note: process status instances are only retained for a limited period of time after completion. Outside of this period, a 404 will be returned for missing process statuses. Please handle this accordingly, by stopping any active polling for these statuses.",
        "operationId": "get-process-status",
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "name": "process-status-id",
            "in": "path",
            "description": "The id of the process status being requested. This id is supplied in every response to a PUT/POST/DELETE request on the other endpoints.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok: Successfully processed the request.",
            "schema": {
              "$ref": "#/definitions/ProcessStatus"
            }
          },
          "404": {
            "description": "Not found: The requested item could not be found.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/replenishments": {
      "get": {
        "tags": [
          "Replenishments"
        ],
        "summary": "Get replenishments",
        "description": "Gets a list of replenishments.",
        "operationId": "get-replenishments",
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "name": "reference",
            "in": "query",
            "description": "Custom user defined reference to identify the replenishment.",
            "required": false,
            "type": "string",
            "x-example": "REFERENCE1"
          },
          {
            "name": "ean",
            "in": "query",
            "description": "The EAN number associated with this product.",
            "required": false,
            "type": "string",
            "x-example": "0000007740404"
          },
          {
            "name": "start-date",
            "in": "query",
            "description": "The creation start date to find the replenishment. In ISO 8601 format.",
            "required": false,
            "type": "string",
            "x-example": "2021-01-01"
          },
          {
            "name": "end-date",
            "in": "query",
            "description": "The end date of the range to find the replenishment. In ISO 8601 format.",
            "required": false,
            "type": "string",
            "x-example": "2021-01-02"
          },
          {
            "name": "state",
            "in": "query",
            "description": "The current state(s) of the replenishment.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "x-example": "ANNOUNCED"
          },
          {
            "name": "page",
            "in": "query",
            "description": "The requested page number with a page size of 50 items.",
            "required": false,
            "type": "integer",
            "default": 1,
            "minimum": 1,
            "format": "int32",
            "x-example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Ok: Successfully processed the request.",
            "schema": {
              "$ref": "#/definitions/ReplenishmentsResponse"
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Replenishments"
        ],
        "summary": "Post replenishment",
        "description": "Create a replenishment.",
        "operationId": "post-replenishment",
        "consumes": [
          "application/vnd.retailer.v5+json"
        ],
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateReplenishmentRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted: Successfully scheduled the request for processing.",
            "schema": {
              "$ref": "#/definitions/ProcessStatus"
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/replenishments/pickup-time-slots": {
      "post": {
        "tags": [
          "Replenishments"
        ],
        "summary": "Post pickup time slots",
        "description": "Retrieve pickup time slots.",
        "operationId": "post-pickup-time-slots",
        "consumes": [
          "application/vnd.retailer.v5+json"
        ],
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PickupTimeSlotsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok: Successfully processed the request.",
            "schema": {
              "$ref": "#/definitions/PickupTimeSlotsResponse"
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/replenishments/product-labels": {
      "post": {
        "tags": [
          "Replenishments"
        ],
        "summary": "Post product labels",
        "description": "Retrieve product labels.",
        "operationId": "post-product-labels",
        "consumes": [
          "application/vnd.retailer.v5+json"
        ],
        "produces": [
          "application/vnd.retailer.v5+pdf"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductLabelsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok: Successfully processed the request.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "byte"
              }
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          },
          "404": {
            "description": "Not found: The requested item could not be found.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/replenishments/{replenishment-id}": {
      "get": {
        "tags": [
          "Replenishments"
        ],
        "summary": "Get a replenishment by replenishment id",
        "description": "Gets a replenishment by replenishment id.",
        "operationId": "get-replenishment",
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "name": "replenishment-id",
            "in": "path",
            "description": "The unique identifier of the replenishment.",
            "required": true,
            "type": "string",
            "x-example": "2312078154"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok: Successfully processed the request.",
            "schema": {
              "$ref": "#/definitions/ReplenishmentResponse"
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          },
          "404": {
            "description": "Not found: The requested item could not be found.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Replenishments"
        ],
        "summary": "Update replenishment ",
        "description": "Update a replenishment.",
        "operationId": "put-replenishment",
        "consumes": [
          "application/vnd.retailer.v5+json"
        ],
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "name": "replenishment-id",
            "in": "path",
            "description": "The unique identifier of the replenishment.",
            "required": true,
            "type": "string",
            "x-example": "2312078154"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UpdateReplenishmentRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted: Successfully scheduled the request for processing.",
            "schema": {
              "$ref": "#/definitions/ProcessStatus"
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/replenishments/{replenishment-id}/load-carrier-labels": {
      "get": {
        "tags": [
          "Replenishments"
        ],
        "summary": "Get load carrier labels",
        "description": "Retrieve the load carrier labels.",
        "operationId": "get-load-carrier-labels",
        "produces": [
          "application/vnd.retailer.v5+pdf"
        ],
        "parameters": [
          {
            "name": "replenishment-id",
            "in": "path",
            "description": "The unique identifier of the replenishment.",
            "required": true,
            "type": "string",
            "x-example": "2312078154"
          },
          {
            "name": "label-type",
            "in": "query",
            "description": "The type of label which you want to print.",
            "required": true,
            "type": "string",
            "default": "WAREHOUSE",
            "x-example": "WAREHOUSE",
            "enum": [
              "WAREHOUSE",
              "TRANSPORT"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Ok: Successfully processed the request.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "byte"
              }
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          },
          "404": {
            "description": "Not found: The requested item could not be found.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/replenishments/{replenishment-id}/pick-list": {
      "get": {
        "tags": [
          "Replenishments"
        ],
        "summary": "Get pick list",
        "description": "Retrieve the pick list.",
        "operationId": "get-pick-list",
        "produces": [
          "application/vnd.retailer.v5+pdf"
        ],
        "parameters": [
          {
            "name": "replenishment-id",
            "in": "path",
            "description": "The unique identifier of the replenishment.",
            "required": true,
            "type": "string",
            "x-example": "2312078154"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok: Successfully processed the request.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "byte"
              }
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          },
          "404": {
            "description": "Not found: The requested item could not be found.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/returns": {
      "get": {
        "tags": [
          "Returns"
        ],
        "summary": "Get returns",
        "description": "Get a paginated list of multi-item returns, which are sorted by date in descending order.",
        "operationId": "get-returns",
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page to get with a page size of 50.",
            "required": false,
            "type": "integer",
            "default": 1,
            "minimum": 1,
            "format": "int32"
          },
          {
            "name": "handled",
            "in": "query",
            "description": "The status of the returns you wish to see, shows either handled or unhandled returns.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "fulfilment-method",
            "in": "query",
            "description": "The fulfilment method. Fulfilled by the retailer (FBR) or fulfilled by bol.com (FBB).",
            "required": false,
            "type": "string",
            "default": "FBR",
            "enum": [
              "FBR",
              "FBB"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Ok: Successfully processed the request.",
            "schema": {
              "$ref": "#/definitions/ReturnsResponse"
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Returns"
        ],
        "summary": "Create return",
        "description": "Create a return, and automatically handle it with the provided handling result. When successfully created, the resulting return id is provided in the process status.",
        "operationId": "create-return",
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateReturnRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted: Successfully scheduled the request for processing.",
            "schema": {
              "$ref": "#/definitions/ProcessStatus"
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/returns/{return-id}": {
      "get": {
        "tags": [
          "Returns"
        ],
        "summary": "Get a return by return id",
        "description": "Retrieve a return based on the return id.",
        "operationId": "get-return",
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "name": "return-id",
            "in": "path",
            "description": "Unique identifier for a return.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok: Successfully processed the request.",
            "schema": {
              "$ref": "#/definitions/_Return"
            }
          },
          "404": {
            "description": "Not found: The requested item could not be found.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/returns/{rma-id}": {
      "put": {
        "tags": [
          "Returns"
        ],
        "summary": "Handle a return",
        "description": "Allows the user to handle a return. This can be to either handle an open return, or change the handlingResult of an already handled return. The latter is only possible in limited scenarios, please check the returns documentation for a complete list.",
        "operationId": "handle-return",
        "consumes": [
          "application/vnd.retailer.v5+json"
        ],
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "name": "rma-id",
            "in": "path",
            "description": "The RMA (Return Merchandise Authorization) id that identifies this particular return.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The handling result requested by the retailer.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ReturnRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted: Successfully scheduled the request for processing.",
            "schema": {
              "$ref": "#/definitions/ProcessStatus"
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/shipments": {
      "get": {
        "tags": [
          "Shipments"
        ],
        "summary": "Get shipment list",
        "description": "A paginated list to retrieve all your shipments up to 3 months old. The shipments will be sorted by date in descending order.",
        "operationId": "get-shipments",
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page to get with a page size of 50.",
            "required": false,
            "type": "integer",
            "default": 1,
            "format": "int32"
          },
          {
            "name": "fulfilment-method",
            "in": "query",
            "description": "The fulfilment method. Fulfilled by the retailer (FBR) or fulfilled by bol.com (FBB).",
            "required": false,
            "type": "string",
            "default": "FBR",
            "enum": [
              "FBR",
              "FBB"
            ]
          },
          {
            "name": "order-id",
            "in": "query",
            "description": "The id of the order. Only valid without fulfilment-method. The default fulfilment-method is ignored.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok: Successfully processed the request.",
            "schema": {
              "$ref": "#/definitions/ShipmentsResponse"
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/shipments/{shipment-id}": {
      "get": {
        "tags": [
          "Shipments"
        ],
        "summary": "Get a shipment by shipment id",
        "description": "Retrieve a single shipment by its corresponding id.",
        "operationId": "get-shipment",
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "name": "shipment-id",
            "in": "path",
            "description": "The id of the shipment.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok: Successfully processed the request.",
            "schema": {
              "$ref": "#/definitions/Shipment"
            }
          },
          "404": {
            "description": "Not found: The requested item could not be found.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/shipping-labels": {
      "post": {
        "tags": [
          "Shipping Labels"
        ],
        "summary": "Create a shipping label",
        "description": "Create a shipping label with a shipping label offer id retrieved from get delivery options.",
        "operationId": "post-shipping-label",
        "consumes": [
          "application/vnd.retailer.v5+json"
        ],
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ShippingLabelRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted: Successfully scheduled the request for processing.",
            "schema": {
              "$ref": "#/definitions/ProcessStatus"
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/shipping-labels/delivery-options": {
      "post": {
        "tags": [
          "Shipping Labels"
        ],
        "summary": "Get delivery options for a shippable configuration of a number of order items within an order.",
        "description": "Retrieves all available delivery options based on the supplied configuration of order items that has to be shipped.",
        "operationId": "get-delivery-options",
        "consumes": [
          "application/vnd.retailer.v5+json"
        ],
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DeliveryOptionsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok: Successfully processed the request.",
            "schema": {
              "$ref": "#/definitions/DeliveryOptionsResponse"
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          },
          "404": {
            "description": "Not found: The requested item could not be found.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/shipping-labels/{shipping-label-id}": {
      "get": {
        "tags": [
          "Shipping Labels"
        ],
        "summary": "Get a shipping label",
        "description": "Retrieves a shipping label by shipping label id. Metadata for the shipping label is added as headers in the response. If you are only interested in the metadata, you can do a HEAD request to retrieve only the headers without the label data.",
        "operationId": "get-shipping-label",
        "produces": [
          "application/vnd.retailer.v5+pdf"
        ],
        "parameters": [
          {
            "name": "shipping-label-id",
            "in": "path",
            "description": "The shipping label id.",
            "required": true,
            "type": "string",
            "x-example": "6ff736b5-cdd0-4150-8c67-78269ee986f5"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok: Successfully processed the request.",
            "headers": {
              "X-Track-And-Trace-Code": {
                "type": "string",
                "description": "Track and trace code for the retrieved label."
              },
              "X-Transporter-Code": {
                "type": "string",
                "description": "Transporter code for the retrieved label."
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "byte"
              }
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          },
          "404": {
            "description": "Not found: The requested item could not be found.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/subscriptions": {
      "get": {
        "tags": [
          "Subscriptions",
          "BETA"
        ],
        "summary": "BETA: Get push notification subscriptions",
        "description": "Retrieve a list of all configured and active push notification subscriptions.",
        "operationId": "get-push-notification-subscriptions",
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "responses": {
          "200": {
            "description": "Ok: Successfully processed the request.",
            "schema": {
              "$ref": "#/definitions/SubscriptionsResponse"
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Subscriptions",
          "BETA"
        ],
        "summary": "BETA: Create push notification subscription",
        "description": "Create a push notification subscription for one (or more) of the available resources. The configured URL has to support https scheme.",
        "operationId": "post-push-notification-subscription",
        "consumes": [
          "application/vnd.retailer.v5+json"
        ],
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateSubscriptionRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted: Successfully scheduled the request for processing.",
            "schema": {
              "$ref": "#/definitions/ProcessStatus"
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/subscriptions/signature-keys": {
      "get": {
        "tags": [
          "Subscriptions",
          "BETA"
        ],
        "summary": "BETA: Retrieve public keys for push notification signature validation.",
        "description": "Retrieve a list of public keys that should be used to validate the signature header for push notifications received from bol.com.",
        "operationId": "get-subscription-keys",
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "responses": {
          "200": {
            "description": "Ok: Successfully processed the request.",
            "schema": {
              "$ref": "#/definitions/KeySetResponse"
            }
          }
        }
      }
    },
    "/retailer/subscriptions/test": {
      "post": {
        "tags": [
          "Subscriptions",
          "BETA"
        ],
        "summary": "BETA: Send test push notification for subscriptions",
        "description": "Send a test push notification to all subscriptions for the provided event.",
        "operationId": "post-test-push-notification",
        "consumes": [
          "application/vnd.retailer.v5+json"
        ],
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "responses": {
          "202": {
            "description": "Accepted: Successfully scheduled the request for processing.",
            "schema": {
              "$ref": "#/definitions/ProcessStatus"
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/subscriptions/{subscription-id}": {
      "get": {
        "tags": [
          "Subscriptions",
          "BETA"
        ],
        "summary": "BETA: Get push notification subscription by id",
        "description": "Retrieve a configured and active push notification subscription with the provided id.",
        "operationId": "get-push-notification-subscription",
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "name": "subscription-id",
            "in": "path",
            "description": "A unique identifier for the subscription.",
            "required": true,
            "type": "string",
            "x-example": "1234"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok: Successfully processed the request.",
            "schema": {
              "$ref": "#/definitions/SubscriptionResponse"
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          },
          "404": {
            "description": "Not found: The requested item could not be found.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Subscriptions",
          "BETA"
        ],
        "summary": "BETA: Update push notification subscription",
        "description": "Update an existing push notification subscription with the supplied id. The configured URL has to support https scheme.",
        "operationId": "put-push-notification-subscription",
        "consumes": [
          "application/vnd.retailer.v5+json"
        ],
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "name": "subscription-id",
            "in": "path",
            "description": "A unique identifier for the subscription.",
            "required": true,
            "type": "string",
            "x-example": "1234"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UpdateSubscriptionRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted: Successfully scheduled the request for processing.",
            "schema": {
              "$ref": "#/definitions/ProcessStatus"
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Subscriptions",
          "BETA"
        ],
        "summary": "BETA: Delete push notification subscription",
        "description": "Delete a push notification subscription with the provided id.",
        "operationId": "delete-push-notification-subscription",
        "consumes": [
          "application/vnd.retailer.v5+json"
        ],
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "name": "subscription-id",
            "in": "path",
            "description": "A unique identifier for the subscription.",
            "required": true,
            "type": "string",
            "x-example": "1234"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted: Successfully scheduled the request for processing.",
            "schema": {
              "$ref": "#/definitions/ProcessStatus"
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    },
    "/retailer/transports/{transport-id}": {
      "put": {
        "tags": [
          "Transports"
        ],
        "summary": "Add transport information by transport id",
        "description": "Add information to an existing transport. The transport id is part of the shipment. You can retrieve the transport id through the GET shipment list request.",
        "operationId": "add-transport-information-by-transport-id",
        "consumes": [
          "application/vnd.retailer.v5+json"
        ],
        "produces": [
          "application/vnd.retailer.v5+json"
        ],
        "parameters": [
          {
            "name": "transport-id",
            "in": "path",
            "description": "The transport id.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The change transport requested by the user.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ChangeTransportRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted: Successfully scheduled the request for processing.",
            "schema": {
              "$ref": "#/definitions/ProcessStatus"
            }
          },
          "400": {
            "description": "Bad request: The sent request does not meet the API specification. Please check the error message(s) for more information.",
            "schema": {
              "$ref": "#/definitions/Problem"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AdditionalService": {
      "type": "object",
      "properties": {
        "serviceType": {
          "type": "string",
          "example": "PLACEMENT_AND_INSTALLATION",
          "description": "An additional service type that the customer selected when purchasing this order item."
        }
      }
    },
    "Address": {
      "type": "object",
      "required": [
        "city",
        "countryCode",
        "houseNumber",
        "houseNumberExtension",
        "streetName",
        "zipCode"
      ],
      "properties": {
        "streetName": {
          "type": "string",
          "example": "Dorpstraat",
          "description": "The street name of the pickup location."
        },
        "houseNumber": {
          "type": "string",
          "example": "1",
          "description": "The house number of the pickup location."
        },
        "houseNumberExtension": {
          "type": "string",
          "example": "B",
          "description": "The extension of the house number of the pickup location."
        },
        "zipCode": {
          "type": "string",
          "example": "1111ZZ",
          "description": "The zip code in '1234AB' format for NL and '0000' for BE addresses."
        },
        "city": {
          "type": "string",
          "example": "Utrecht",
          "description": "The city of the pickup address."
        },
        "countryCode": {
          "type": "string",
          "example": "NL",
          "description": "The ISO 3166-2 country code."
        },
        "attentionOf": {
          "type": "string",
          "example": "Jan Jansen",
          "description": "Name of the person responsible for this replenishment."
        }
      }
    },
    "Attribute": {
      "type": "object",
      "required": [
        "id",
        "values"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "Width",
          "description": "Identifier of the attribute from the data model.",
          "minLength": 1,
          "maxLength": 100
        },
        "values": {
          "type": "array",
          "description": "A list of attribute values.",
          "items": {
            "$ref": "#/definitions/AttributeValue"
          }
        }
      }
    },
    "AttributeValue": {
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string",
          "example": "14.5",
          "description": "The value of the attribute.",
          "minLength": 1,
          "maxLength": 10000
        },
        "unitId": {
          "type": "string",
          "example": "mm",
          "description": "The unit identifier of the attribute."
        }
      }
    },
    "BillingDetails": {
      "type": "object",
      "properties": {
        "salutation": {
          "type": "string",
          "example": "MALE",
          "description": "The salutation of the customer.",
          "enum": [
            "MALE",
            "FEMALE",
            "UNKNOWN"
          ]
        },
        "firstName": {
          "type": "string",
          "example": "Billie",
          "description": "The first name of the customer."
        },
        "surname": {
          "type": "string",
          "example": "Jansen",
          "description": "The surname of the customer."
        },
        "streetName": {
          "type": "string",
          "example": "Dorpstraat",
          "description": "The street name."
        },
        "houseNumber": {
          "type": "string",
          "example": "1",
          "description": "The house number."
        },
        "houseNumberExtension": {
          "type": "string",
          "example": "B",
          "description": "The extension on the house number."
        },
        "extraAddressInformation": {
          "type": "string",
          "example": "Apartment",
          "description": "Additional information related to the address that helps in delivering the package."
        },
        "zipCode": {
          "type": "string",
          "example": "1111ZZ",
          "description": "The ZIP code in '1234AB' format for NL orders and '0000' format for BE orders."
        },
        "city": {
          "type": "string",
          "example": "Utrecht",
          "description": "The name of the city."
        },
        "countryCode": {
          "type": "string",
          "example": "NL",
          "description": "The country code."
        },
        "email": {
          "type": "string",
          "example": "billie@verkopen.bol.com",
          "description": "A scrambled email address that can be used to contact the customer."
        },
        "company": {
          "type": "string",
          "example": "bol.com",
          "description": "The company name."
        },
        "vatNumber": {
          "type": "string",
          "example": "NL999999999B99",
          "description": "The Value Added Tax (VAT) / BTW number for business sellers situated in the Netherlands."
        },
        "kvkNumber": {
          "type": "string",
          "example": "99887766",
          "description": "The Kamer van Koophandel (kvk) number for organizations situated in the Netherlands or ondernemingsnummer for organizations situated in Belgium."
        },
        "orderReference": {
          "type": "string",
          "example": "MijnReferentie",
          "description": "The order reference specified by the customer when ordering a product."
        }
      },
      "description": "The details of the customer that is responsible for the financial fulfillment of this order."
    },
    "BulkCommissionQuery": {
      "type": "object",
      "required": [
        "ean",
        "unitPrice"
      ],
      "properties": {
        "ean": {
          "type": "string",
          "example": "0000007740404",
          "description": "The EAN number associated with this product."
        },
        "condition": {
          "type": "string",
          "example": "NEW",
          "description": "The condition of the offer.",
          "enum": [
            "NEW",
            "AS_NEW",
            "GOOD",
            "REASONABLE",
            "MODERATE"
          ]
        },
        "unitPrice": {
          "type": "number",
          "example": 59.0,
          "description": "The price of the product with a period as a decimal separator. The price should always have two decimals precision.",
          "minimum": 0,
          "maximum": 9999
        }
      }
    },
    "BulkCommissionRequest": {
      "type": "object",
      "required": [
        "commissionQueries"
      ],
      "properties": {
        "commissionQueries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BulkCommissionQuery"
          },
          "maxItems": 100,
          "minItems": 1
        }
      }
    },
    "BulkCommissionResponse": {
      "type": "object",
      "required": [
        "commissions"
      ],
      "properties": {
        "commissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Commission"
          }
        }
      }
    },
    "BulkProcessStatusRequest": {
      "type": "object",
      "required": [
        "processStatusQueries"
      ],
      "properties": {
        "processStatusQueries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProcessStatusId"
          },
          "maxItems": 1000,
          "minItems": 1
        }
      }
    },
    "BundlePrice": {
      "type": "object",
      "required": [
        "quantity",
        "unitPrice"
      ],
      "properties": {
        "quantity": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "The minimum quantity a customer must order in order to receive discount. The element with value 1 must at least be present. In case of using more elements, the respective quantities must be in increasing order.",
          "minimum": 1,
          "maximum": 24
        },
        "unitPrice": {
          "type": "number",
          "example": 9.99,
          "description": "The price per single unit including VAT in case the customer orders at least the quantity provided. When using more than 1 price, the respective prices must be in decreasing order using 2 decimal precision and dot separated.",
          "minimum": 1,
          "maximum": 9999
        }
      }
    },
    "ChangeTransportRequest": {
      "type": "object",
      "properties": {
        "transporterCode": {
          "type": "string",
          "example": "TNT",
          "enum": [
            "BRIEFPOST",
            "UPS",
            "TNT",
            "TNT-EXTRA",
            "TNT_BRIEF",
            "TNT-EXPRESS",
            "DYL",
            "DPD-NL",
            "DPD-BE",
            "BPOST_BE",
            "BPOST_BRIEF",
            "DHLFORYOU",
            "GLS",
            "FEDEX_NL",
            "FEDEX_BE",
            "OTHER",
            "DHL",
            "DHL_DE",
            "DHL-GLOBAL-MAIL",
            "TSN",
            "FIEGE",
            "TRANSMISSION",
            "PARCEL-NL",
            "LOGOIX",
            "PACKS",
            "COURIER",
            "RJP"
          ]
        },
        "trackAndTrace": {
          "type": "string",
          "example": "3SBOL0987654321",
          "description": "The track and trace code that is associated with this transport."
        }
      }
    },
    "Commission": {
      "type": "object",
      "required": [
        "condition",
        "ean",
        "fixedAmount",
        "percentage",
        "reductions",
        "totalCost",
        "unitPrice"
      ],
      "properties": {
        "ean": {
          "type": "string",
          "example": "0000007740404",
          "description": "The EAN number associated with this product."
        },
        "condition": {
          "type": "string",
          "example": "NEW",
          "description": "The condition of the offer."
        },
        "unitPrice": {
          "type": "number",
          "example": 59.0,
          "description": "The intended selling price per single unit up to 2 decimals precision, including VAT."
        },
        "fixedAmount": {
          "type": "number",
          "example": 0.99,
          "description": "A fixed commission fee, including VAT."
        },
        "percentage": {
          "type": "number",
          "example": 15.0,
          "description": "A percentage of commission, based on the intended selling price per unit, including VAT."
        },
        "totalCost": {
          "type": "number",
          "example": 6.85,
          "description": "The total commission for selling this product at bol.com. The price includes VAT for Dutch sellers, and excludes VAT for Belgium sellers."
        },
        "totalCostWithoutReduction": {
          "type": "number",
          "example": 9.84,
          "description": "The total commission for selling this product at bol.com without reductions including VAT."
        },
        "reductions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reduction"
          }
        }
      }
    },
    "Condition": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "AS_NEW",
          "description": "The condition of the offered product.",
          "enum": [
            "NEW",
            "AS_NEW",
            "GOOD",
            "REASONABLE",
            "MODERATE"
          ]
        },
        "category": {
          "type": "string",
          "example": "SECONDHAND",
          "description": "The category of the condition. If not given NEW or SECONDHAND is derived from NAME.",
          "enum": [
            "NEW",
            "SECONDHAND"
          ]
        },
        "comment": {
          "type": "string",
          "example": "Heeft een koffie vlek op de kaft.",
          "description": "The description of the condition of the product. Only allowed if name is not NEW and may not contain e-mail addresses.",
          "minLength": 0,
          "maxLength": 2000
        }
      }
    },
    "CancelOrderItemsRequest": {
      "type": "object",
      "required": [
        "orderItems"
      ],
      "properties": {
        "orderItems": {
          "type": "array",
          "description": "List of order items to cancel. Order item id's must belong to the same order.",
          "items": {
            "$ref": "#/definitions/OrderItemCancellation"
          },
          "maxItems": 1,
          "minItems": 1
        }
      }
    },
    "Countries": {
      "type": "object",
      "required": [
        "maximum",
        "minimum"
      ],
      "properties": {
        "countryCode": {
          "type": "string",
          "example": "NL",
          "description": "Countries in which this offer is currently on sale in the webshop, in ISO-3166-1 format."
        },
        "minimum": {
          "type": "number",
          "format": "double",
          "example": 10.5,
          "description": "Minimum number of estimated sales expectations on the bol.com platform."
        },
        "maximum": {
          "type": "number",
          "format": "double",
          "example": 20.5,
          "description": "Maximum number of estimated sales expectations on the bol.com platform."
        }
      }
    },
    "CountryCode": {
      "type": "object",
      "required": [
        "countryCode"
      ],
      "properties": {
        "countryCode": {
          "type": "string",
          "example": "NL",
          "description": "Countries in which this offer is currently on sale in the webshop, in ISO-3166-1 format."
        }
      }
    },
    "CreateAddress": {
      "type": "object",
      "required": [
        "attentionOf",
        "city",
        "houseNumber",
        "streetName",
        "zipCode"
      ],
      "properties": {
        "streetName": {
          "type": "string",
          "example": "Dorpstraat",
          "description": "The street name of the pickup address.",
          "minLength": 1,
          "maxLength": 64
        },
        "houseNumber": {
          "type": "string",
          "example": "1",
          "description": "The house number of the pickup address."
        },
        "zipCode": {
          "type": "string",
          "example": "1111ZZ",
          "description": "The zip code in '1234AB' format for NL and '0000' for BE addresses.",
          "minLength": 1,
          "maxLength": 8
        },
        "houseNumberExtension": {
          "type": "string",
          "example": "B",
          "description": "The extension of the house number.",
          "minLength": 0,
          "maxLength": 6
        },
        "city": {
          "type": "string",
          "example": "Utrecht",
          "description": "The city of the pickup address.",
          "minLength": 1,
          "maxLength": 34
        },
        "countryCode": {
          "type": "string",
          "example": "NL",
          "description": "The ISO 3166-2 country code.",
          "minLength": 1,
          "maxLength": 3
        },
        "attentionOf": {
          "type": "string",
          "example": "Billie Bol",
          "description": "Name of the person responsible for this replenishment.",
          "minLength": 1,
          "maxLength": 35
        }
      }
    },
    "CreateDeliveryInfo": {
      "type": "object",
      "required": [
        "expectedDeliveryDate",
        "transporterCode"
      ],
      "properties": {
        "expectedDeliveryDate": {
          "type": "string",
          "example": "2021-01-01",
          "description": "The expected delivery date of the shipment at the bol.com warehouse. In ISO 8601 format."
        },
        "transporterCode": {
          "type": "string",
          "example": "POSTNL",
          "description": "The transporter code that correlates to the transport used for this replenishment.",
          "enum": [
            "POSTNL",
            "DHL",
            "DPD",
            "GLS",
            "UPS",
            "OTHER"
          ]
        }
      }
    },
    "CreateOfferExportRequest": {
      "type": "object",
      "required": [
        "format"
      ],
      "properties": {
        "format": {
          "type": "string",
          "example": "CSV",
          "description": "The file format in which to return the export.",
          "enum": [
            "CSV"
          ]
        }
      }
    },
    "CreateOfferRequest": {
      "type": "object",
      "required": [
        "condition",
        "ean",
        "fulfilment",
        "pricing",
        "stock"
      ],
      "properties": {
        "ean": {
          "type": "string",
          "example": "0000007740404",
          "description": "The EAN number associated with this product. Note: in case an ISBN is provided, the ISBN will be replaced with the actual EAN belonging to this ISBN."
        },
        "condition": {
          "$ref": "#/definitions/Condition"
        },
        "reference": {
          "type": "string",
          "example": "REF12345",
          "description": "A user-defined reference that helps you identify this particular offer when receiving data from us. This element can optionally be left empty and has a maximum amount of 20 characters.",
          "minLength": 0,
          "maxLength": 20
        },
        "onHoldByRetailer": {
          "type": "boolean",
          "example": false,
          "description": "Indicates whether or not you want to put this offer for sale on the bol.com website. Defaults to false."
        },
        "unknownProductTitle": {
          "type": "string",
          "example": "Unknown Product Title",
          "description": "In case the item is not known to bol.com you can use this field to identify this particular product. Note: in case the product is known to bol.com, the unknown product title will not be stored.",
          "minLength": 0,
          "maxLength": 500
        },
        "pricing": {
          "$ref": "#/definitions/Pricing"
        },
        "stock": {
          "$ref": "#/definitions/StockCreate"
        },
        "fulfilment": {
          "$ref": "#/definitions/Fulfilment"
        }
      }
    },
    "CreatePickupAppointment": {
      "type": "object",
      "required": [
        "address",
        "pickupTimeSlot"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/CreateAddress"
        },
        "pickupTimeSlot": {
          "$ref": "#/definitions/CreatePickupTimeSlot"
        },
        "commentToTransporter": {
          "type": "string",
          "example": "Eerste verdieping.",
          "description": "A comment to the transporter regarding the pickup appointment.",
          "minLength": 0,
          "maxLength": 30
        }
      }
    },
    "CreatePickupTimeSlot": {
      "type": "object",
      "required": [
        "fromDateTime",
        "untilDateTime"
      ],
      "properties": {
        "fromDateTime": {
          "type": "string",
          "example": "2021-01-01T09:00:00+01:00",
          "description": "The selected start date and time for the replenishment pickup appointment. In ISO 8601 format."
        },
        "untilDateTime": {
          "type": "string",
          "example": "2021-01-01T10:00:00+01:00",
          "description": "The selected end date and time for the replenishment pickup appointment. In ISO 8601 format."
        }
      }
    },
    "CreateProductContentRequest": {
      "type": "object",
      "required": [
        "language",
        "productContents"
      ],
      "properties": {
        "language": {
          "type": "string",
          "example": "nl",
          "description": "The language to indicate the language of the supplied content.",
          "enum": [
            "nl",
            "nl-BE",
            "fr",
            "fr-BE"
          ]
        },
        "productContents": {
          "type": "array",
          "description": "A list of supplied products and their attributes. Attributes that are required for publishing products online will be mentioned in the data model.",
          "items": {
            "$ref": "#/definitions/ProductContent"
          },
          "maxItems": 100,
          "minItems": 1
        }
      }
    },
    "CreateReplenishmentLine": {
      "type": "object",
      "required": [
        "ean",
        "quantity"
      ],
      "properties": {
        "ean": {
          "type": "string",
          "example": "0000007740404",
          "description": "The EAN number associated with this product."
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "The number of announced items.",
          "minimum": 1,
          "maximum": 9999
        }
      }
    },
    "CreateReplenishmentRequest": {
      "type": "object",
      "required": [
        "labelingByBol",
        "lines",
        "numberOfLoadCarriers",
        "reference"
      ],
      "properties": {
        "reference": {
          "type": "string",
          "example": "REFERENCE1",
          "description": "Custom user reference for this replenishment. Must contain at least 1 digit and only upper case characters allowed."
        },
        "deliveryInfo": {
          "$ref": "#/definitions/CreateDeliveryInfo"
        },
        "labelingByBol": {
          "type": "boolean",
          "example": false,
          "description": "Indicates whether the replenishment will be labeled by bol.com or not."
        },
        "numberOfLoadCarriers": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "The number of parcels in this replenishment.",
          "minimum": 1,
          "maximum": 20
        },
        "pickupAppointment": {
          "$ref": "#/definitions/CreatePickupAppointment"
        },
        "lines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CreateReplenishmentLine"
          },
          "maxItems": 9999,
          "minItems": 1
        }
      }
    },
    "CreateReturnRequest": {
      "type": "object",
      "required": [
        "handlingResult",
        "orderItemId",
        "quantityReturned"
      ],
      "properties": {
        "orderItemId": {
          "type": "string",
          "example": "2012345678",
          "description": "The id for the order item (1 order can have multiple order items)."
        },
        "quantityReturned": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "The quantity of items returned.",
          "minimum": 1,
          "maximum": 9999
        },
        "handlingResult": {
          "type": "string",
          "example": "RETURN_RECEIVED",
          "description": "The handling result requested by the retailer.",
          "enum": [
            "RETURN_RECEIVED",
            "EXCHANGE_PRODUCT",
            "RETURN_DOES_NOT_MEET_CONDITIONS",
            "REPAIR_PRODUCT",
            "CUSTOMER_KEEPS_PRODUCT_PAID"
          ]
        }
      }
    },
    "CreateSubscriptionRequest": {
      "type": "object",
      "required": [
        "resources",
        "url"
      ],
      "properties": {
        "resources": {
          "type": "array",
          "example": "['PROCESS_STATUS']",
          "description": "Type of event.",
          "items": {
            "type": "string",
            "enum": [
              "PROCESS_STATUS"
            ]
          }
        },
        "url": {
          "type": "string",
          "example": "https://www.bol.com/webhook",
          "description": "URL to receive this WebHook notification.",
          "minLength": 0,
          "maxLength": 255,
          "pattern": "^https.*"
        }
      }
    },
    "CreateUnpublishedOfferReportRequest": {
      "type": "object",
      "required": [
        "format"
      ],
      "properties": {
        "format": {
          "type": "string",
          "example": "CSV",
          "description": "The file format in which to return the export.",
          "enum": [
            "CSV"
          ]
        }
      }
    },
    "CustomerDetails": {
      "type": "object",
      "properties": {
        "salutationCode": {
          "type": "string",
          "example": "MALE",
          "description": "The salutation of the customer."
        },
        "firstName": {
          "type": "string",
          "example": "Billie",
          "description": "The first name of the customer."
        },
        "surname": {
          "type": "string",
          "example": "Jansen",
          "description": "The surname of the customer."
        },
        "streetName": {
          "type": "string",
          "example": "Dorpstraat",
          "description": "The street name."
        },
        "houseNumber": {
          "type": "string",
          "example": "1",
          "description": "The house number."
        },
        "houseNumberExtended": {
          "type": "string",
          "example": "B",
          "description": "The extension on the house number."
        },
        "extraAddressInformation": {
          "type": "string",
          "example": "Apartment",
          "description": "Additional information related to the address that helps in delivering the package."
        },
        "zipCode": {
          "type": "string",
          "example": "1111ZZ",
          "description": "The ZIP code in '1234AB' format for NL orders and '0000' format for BE orders."
        },
        "city": {
          "type": "string",
          "example": "Utrecht",
          "description": "The name of the city."
        },
        "countryCode": {
          "type": "string",
          "example": "NL",
          "description": "The country code."
        },
        "email": {
          "type": "string",
          "example": "billie@verkopen.bol.com",
          "description": "A scrambled email address that can be used to contact the customer."
        },
        "deliveryPhoneNumber": {
          "type": "string",
          "example": "012123456",
          "description": "The delivery phone number of the customer. Filled in case the order requires an appointment for delivering the goods."
        },
        "company": {
          "type": "string",
          "example": "bol.com",
          "description": "The company name."
        },
        "vatNumber": {
          "type": "string",
          "example": "NL999999999B99",
          "description": "The Value Added Tax (VAT) / BTW number for business sellers situated in the Netherlands."
        }
      }
    },
    "DeliveryInformation": {
      "type": "object",
      "required": [
        "destinationWarehouse",
        "expectedDeliveryDate",
        "transporterCode"
      ],
      "properties": {
        "expectedDeliveryDate": {
          "type": "string",
          "format": "date",
          "example": "2021-01-02",
          "description": "The expected delivery date of the shipment at the bol.com warehouse in ISO 8601 format."
        },
        "transporterCode": {
          "type": "string",
          "example": "POSTNL",
          "description": "The transporter that will pickup this replenishment.",
          "enum": [
            "POSTNL",
            "DHL",
            "DPD",
            "GLS",
            "UPS",
            "OTHER"
          ]
        },
        "destinationWarehouse": {
          "$ref": "#/definitions/DestinationWarehouse"
        }
      }
    },
    "DeliveryOption": {
      "type": "object",
      "required": [
        "labelPrice",
        "packageRestrictions"
      ],
      "properties": {
        "shippingLabelOfferId": {
          "type": "string",
          "example": "027b79fa-5743-40f0-94c7-0eac761af611",
          "description": "Unique identifier for the shipping label offer."
        },
        "validUntilDate": {
          "type": "string",
          "format": "date",
          "example": "2020-01-12",
          "description": "The date until the delivery option (incl total price) is valid."
        },
        "transporterCode": {
          "type": "string",
          "example": "TNT_BRIEF",
          "description": "A code representing the transporter which is being used for transportation."
        },
        "labelType": {
          "type": "string",
          "example": "MAILBOX_LIGHT",
          "description": "The type of the label, representing the way an item is being transported. MAILBOX is a mailbox package with delivery scan. MAILBOX_LIGHT is a mailbox package without delivery scan. PARCEL is a normal package.",
          "enum": [
            "PARCEL",
            "MAILBOX",
            "MAILBOX_LIGHT"
          ]
        },
        "labelPrice": {
          "$ref": "#/definitions/LabelPrice"
        },
        "packageRestrictions": {
          "$ref": "#/definitions/PackageRestrictions"
        },
        "handoverDetails": {
          "$ref": "#/definitions/HandoverDetails"
        }
      },
      "description": "A delivery option shows how and the costs of a transport for a shippable configuration"
    },
    "DeliveryOptionsRequest": {
      "type": "object",
      "required": [
        "orderItems"
      ],
      "properties": {
        "orderItems": {
          "type": "array",
          "description": "Order items for which the delivery options are requested.",
          "items": {
            "$ref": "#/definitions/OrderItem"
          }
        }
      },
      "description": "The configuration of order items to get delivery options for."
    },
    "DeliveryOptionsResponse": {
      "type": "object",
      "required": [
        "deliveryOptions"
      ],
      "properties": {
        "deliveryOptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeliveryOption"
          }
        }
      },
      "description": "The possible delivery options based on a shippable configuration"
    },
    "DestinationWarehouse": {
      "type": "object",
      "required": [
        "city",
        "countryCode",
        "houseNumber",
        "houseNumberExtension",
        "streetName",
        "zipCode"
      ],
      "properties": {
        "streetName": {
          "type": "string",
          "example": "Industrieweg",
          "description": "The street name of the pickup address."
        },
        "houseNumber": {
          "type": "string",
          "example": "1",
          "description": "The house number of the pickup address."
        },
        "houseNumberExtension": {
          "type": "string",
          "example": "B",
          "description": "The extension of the house number."
        },
        "zipCode": {
          "type": "string",
          "example": "1111ZZ",
          "description": "The zip code in '1234AB' format for NL and '0000' for BE addresses."
        },
        "city": {
          "type": "string",
          "example": "Waalwijk",
          "description": "The city of the pickup address."
        },
        "countryCode": {
          "type": "string",
          "example": "NL",
          "description": "The ISO 3166-2 country code."
        },
        "attentionOf": {
          "type": "string",
          "example": "t.a.v. bol.com",
          "description": "Name of the person responsible for this replenishment."
        }
      }
    },
    "Details": {
      "type": "object",
      "required": [
        "norm",
        "period"
      ],
      "properties": {
        "period": {
          "description": "The period for which the performance is measured.",
          "$ref": "#/definitions/PerformanceIndicatorPeriod"
        },
        "score": {
          "description": "The score for this measurement. In case there are no scores for an indicator, this element is omitted from the response.",
          "$ref": "#/definitions/Score"
        },
        "norm": {
          "description": "Service norm for this indicator.",
          "$ref": "#/definitions/Norm"
        }
      }
    },
    "Fulfilment": {
      "type": "object",
      "required": [
        "method"
      ],
      "properties": {
        "method": {
          "type": "string",
          "example": "FBR",
          "description": "Specifies whether this shipment has been fulfilled by the retailer (FBR) or fulfilled by bol.com (FBB). Defaults to FBR.",
          "enum": [
            "FBR",
            "FBB"
          ]
        },
        "deliveryCode": {
          "type": "string",
          "description": "The delivery promise that applies to this offer. This value will only be used in combination with fulfilmentMethod 'FBR'.",
          "enum": [
            "24uurs-23",
            "24uurs-22",
            "24uurs-21",
            "24uurs-20",
            "24uurs-19",
            "24uurs-18",
            "24uurs-17",
            "24uurs-16",
            "24uurs-15",
            "24uurs-14",
            "24uurs-13",
            "24uurs-12",
            "1-2d",
            "2-3d",
            "3-5d",
            "4-8d",
            "1-8d",
            "MijnLeverbelofte",
            "VVB"
          ]
        }
      }
    },
    "HandoverDetails": {
      "type": "object",
      "properties": {
        "meetsCustomerExpectation": {
          "type": "boolean",
          "example": true,
          "description": "Indicates if you can use this label without receiving a strike if you handover before the latestHandoverDateTime. If this field is 'false' you can still buy and use this label but it will have negative consequences on your performance score because the order will be delivered too early or too late."
        },
        "latestHandoverDateTime": {
          "type": "string",
          "format": "date-time",
          "example": "2018-04-20T10:55:37+02:00",
          "description": "The date and time at which the parcel must ultimately be at the transporter to make sure your parcel is delivered on time. If you handover after this date you will receive a strike because you order will be delivered too late."
        },
        "collectionMethod": {
          "type": "string",
          "example": "DROP_OFF",
          "description": "The type of collection for this parcel.",
          "enum": [
            "DROP_OFF",
            "PICK_UP"
          ]
        }
      }
    },
    "InvalidReplenishmentLine": {
      "type": "object",
      "required": [
        "quantityAnnounced",
        "quantityInProgress",
        "quantityReceived",
        "quantityWithGradedState",
        "quantityWithRegularState",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "example": "UNKNOWN_FBB_PRODUCT",
          "description": "Type of invalid replenishment line, in case the BSKU and/or EAN cannot be determined for this replenishment line.",
          "enum": [
            "UNKNOWN_FBB_PRODUCT",
            "UNKNOWN_EAN_INVENTORY_RELATION"
          ]
        },
        "quantityAnnounced": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "The amount of announced quantity for this replenishment line."
        },
        "quantityReceived": {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "description": "The amount of received quantity for this replenishment line."
        },
        "quantityInProgress": {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "description": "The amount of quantity that is still in progress at the warehouse for this replenishment line."
        },
        "quantityWithGradedState": {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "description": "The quantity within this shipment line that has a graded (unsalable) state."
        },
        "quantityWithRegularState": {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "description": "The quantity within this shipment line that has a regular (salable) state."
        }
      }
    },
    "Inventory": {
      "type": "object",
      "required": [
        "bsku",
        "ean",
        "gradedStock",
        "regularStock",
        "title"
      ],
      "properties": {
        "ean": {
          "type": "string",
          "example": "0000007740404",
          "description": "The EAN number associated with this product."
        },
        "bsku": {
          "type": "string",
          "example": "2950002126612",
          "description": "The BSKU number associated with this product."
        },
        "gradedStock": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "The stock that is not available for sale anymore."
        },
        "regularStock": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "The stock that is available for sale."
        },
        "title": {
          "type": "string",
          "example": "Product Title",
          "description": "The product title."
        }
      }
    },
    "InventoryResponse": {
      "type": "object",
      "required": [
        "inventory"
      ],
      "properties": {
        "inventory": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Inventory"
          }
        }
      }
    },
    "KeySet": {
      "type": "object",
      "required": [
        "id",
        "publicKey",
        "type"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "0",
          "description": "Key identifier. Maps to the keyId value in the signature header of the push request."
        },
        "type": {
          "type": "string",
          "example": "RSA",
          "description": "Key encryption type.",
          "enum": [
            "RSA"
          ]
        },
        "publicKey": {
          "type": "string",
          "example": "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCDO7X3OGEqB6LU2ZQdznuYJX1KhCiJUB0+IwW9UjcgbU2Y/LzUIgGPT33s/+OqqMQOtXp2RV4JM6Zv5/YUZgZAqEIkvvrIYvJB8tXv73VQS2r4Ssy3Y/frJsqy8a3sDOoFeJygHYE6kVf3sOCdo4CO6PFUe7ZwsOSS2/7fNWAaMhY6tEuZwkA7ZLoSd3UHTdeKlV1TH5I3yFClMo1FwABsWzj9DhvEb6Q36j+QLJZAj0xvusJUsOjcSgyXRzVBFtwwNILzs9BO+GWRI4li+rjhaST2pNtvGfnQB5TUOO7Yegk/ucSiV1cFzy95gWQV2F0c9P1vBctETrYKxQBklBbjAgMBAAECggEAGISLVoi9/nA2x7VuqrLs/FvksItIV38UN4urgtddXT2OhcqSLL+9styTFjgofLXTCzx0iKwlCWsQ6U9Y9i6pdGL7GIplqBJ0WEXaGl2OeVXdwk2XOZv/sXsp24yzhapT/nmuKWvZvOtyl9//1vO5DPoQPExwpVUnHxji4SjDr6DuKVNDwh9Z4mVsdfdYVeLYGJ356IGWhTu/JDie4byl8B75UgbmyvfJRjQkoLpVZuhu+jkmhogpoSl6NtaKA+iFlGT9JLtGVHDn15kdEHb+dtzTzyJH40KGjQ7OiZcmA8GFft6zrNlOpyziH7fICtt0//7fR348/Z+XIYUFqfadQQKBgQDeVnqAlkt2Uab/1OjX9O8CRWqdoFLpUGDiHhkaXEylJtm1osFHGiyOi1eEQOy//lnJWKUp7c0b8D/QioP7kI38ES1mBx1KDzFgob4p/U+4R+z24SV/Q3CT6vHbfbe1XxWvE4SOdh4p7+Kuhxz1n6P0TWltvsTbpCJ9GM4wi2Z26QKBgQCXGiObkJI4Wv6RGxq76BHEDZdrLWppXh1+FYfyUaq6bfcSF86yAIRlleEJUh1V8KDw2DCX0rhO3BW0juEl5qz5RohLIxuak+2RbX6IQrVPwtCCeGQzKIRPktht+fi+eSaa5XNMLXURTzjVUdxzFwqDKp+7YQWL8DJ6qEfJGGYX6wKBgBXM8PIOypNtaiyHmdUjBRR57fxKrhaGdRl2zgtRpYpEBvDSZpUsMdZAP3KOUyh4LiGZ+Yfk80mcAwXVrx9Ji0J+BK+OXwbV+od5FIZVei2dj9SdOuoBmNZIITLeXtb/3cZu6X52gnqmNNncEbDb2F2qAX5rSC4pJ+CQQBduc7uRAoGAHzjxfqWi8S4sSAOXxJgxg5djYGwj/t3JrlH4o2OoqZkrYnu05CcjNHKB65EiKq3sM5gYgmayWukzOvoDH/fIakHey9fXTluezVwYt0NBf9e7ihoiakfG/0JSonbypTkXdw5OgsEp3YfHMJ0XtlhefbgDBY8IvF/HrnyzSKRYBD0CgYBlq6nIEZOIqngHdtskT8JOZBcniVPGjUjSiNcYQXfeMwKINUqDGC/YmpPgBOhO93ozeQTCBeeMD8nlbkTHPu7BxCCfpKj6/PPMfxmyFQyDg9ZjjHOIhUMddRw+mSq0zS212JbIr3O4eEtrXPqWfq5phxyE3dRvaX3A3wiEQN9WRA==",
          "description": "The Base64 encoded public key to use when verifying the signature."
        }
      }
    },
    "KeySetResponse": {
      "type": "object",
      "required": [
        "signatureKeys"
      ],
      "properties": {
        "signatureKeys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeySet"
          }
        }
      }
    },
    "LabelPrice": {
      "type": "object",
      "properties": {
        "totalPrice": {
          "type": "number",
          "example": 2.88,
          "description": "The price that is charged for this delivery option, excluding VAT."
        }
      }
    },
    "Link": {
      "type": "object",
      "required": [
        "href",
        "method",
        "rel"
      ],
      "properties": {
        "rel": {
          "type": "string",
          "example": "self",
          "description": "The link relation."
        },
        "href": {
          "type": "string",
          "example": "https://api.bol.com/retailer/process-status/1234567",
          "description": "The URI for the resource linked to."
        },
        "method": {
          "type": "string",
          "example": "GET",
          "description": "The HTTP method to use when accessing the link."
        }
      }
    },
    "LoadCarrier": {
      "type": "object",
      "required": [
        "transportState",
        "transportStateUpdateDateTime"
      ],
      "properties": {
        "sscc": {
          "type": "string",
          "example": "020001200000007000",
          "description": "The Serial Shipping Container Code (SSCC) for this load carrier."
        },
        "transportLabelTrackAndTrace": {
          "type": "string",
          "example": "3SJTXX216692157",
          "description": "The track and trace code for this load carrier."
        },
        "transportState": {
          "type": "string",
          "example": "ANNOUNCED",
          "description": "The current state of the transport for this load carrier.",
          "enum": [
            "ANNOUNCED",
            "PICKED_UP",
            "UNDERWAY",
            "DELAYED",
            "ARRIVED",
            "ERROR"
          ]
        },
        "transportStateUpdateDateTime": {
          "type": "string",
          "format": "date-time",
          "example": "2021-01-02T09:00:00+01:00",
          "description": "The date and time in ISO 8601 format when the latest update for this transport was received."
        }
      }
    },
    "Norm": {
      "type": "object",
      "required": [
        "condition",
        "value"
      ],
      "properties": {
        "condition": {
          "type": "string",
          "example": "<=",
          "description": "Condition norm for this indicator.",
          "enum": [
            "<=",
            ">="
          ]
        },
        "value": {
          "type": "number",
          "format": "float",
          "example": 0.6,
          "description": "Service norm for this indicator."
        }
      }
    },
    "NotPublishableReason": {
      "type": "object",
      "required": [
        "code",
        "description"
      ],
      "properties": {
        "code": {
          "type": "string",
          "example": "4003",
          "description": "Error code signalling that the offer is invalid."
        },
        "description": {
          "type": "string",
          "example": "The seller is on holiday.",
          "description": "Error message describing the reason the offer is invalid."
        }
      }
    },
    "OfferInsight": {
      "type": "object",
      "required": [
        "countries",
        "name",
        "periods",
        "type"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "BUY_BOX_PERCENTAGE",
          "description": "The name of the requested offer insight."
        },
        "type": {
          "type": "string",
          "example": "percentage",
          "description": "Interpretation of the data that applies to this measurement."
        },
        "total": {
          "type": "number",
          "format": "double",
          "example": 50.0,
          "description": "Total number of customer visits on the product page when the offer had the buy box over the requested period (excluding the current day)."
        },
        "countries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OfferInsightsCountry"
          }
        },
        "periods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Periods"
          }
        }
      }
    },
    "OfferInsights": {
      "type": "object",
      "required": [
        "offerInsights"
      ],
      "properties": {
        "offerInsights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OfferInsight"
          }
        }
      },
      "description": "Offer insights."
    },
    "OfferInsightsCountry": {
      "type": "object",
      "required": [
        "countryCode",
        "value"
      ],
      "properties": {
        "countryCode": {
          "type": "string",
          "example": "NL",
          "description": "Countries in which this offer is currently on sale in the webshop, in ISO-3166-1 format."
        },
        "value": {
          "type": "number",
          "format": "double",
          "example": 100.0,
          "description": "The total value of offer insight."
        }
      }
    },
    "OfferInsightsPeriod": {
      "type": "object",
      "required": [
        "year"
      ],
      "properties": {
        "day": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Day of the month."
        },
        "week": {
          "type": "integer",
          "format": "int32",
          "example": 49,
          "description": "Week of the year."
        },
        "month": {
          "type": "integer",
          "format": "int32",
          "example": 12,
          "description": "Month of the year."
        },
        "year": {
          "type": "integer",
          "format": "int32",
          "example": 2019,
          "description": "Year."
        }
      }
    },
    "Order": {
      "type": "object",
      "required": [
        "orderItems",
        "shipmentDetails"
      ],
      "properties": {
        "orderId": {
          "type": "string",
          "example": "A2K8290LP8",
          "description": "The order id."
        },
        "pickupPoint": {
          "type": "boolean",
          "example": true,
          "description": "Indicates whether this order is shipped to a Pick Up Point."
        },
        "orderPlacedDateTime": {
          "type": "string",
          "format": "date-time",
          "example": "2017-02-09T12:39:48+01:00",
          "description": "The date and time in ISO 8601 format when the order was placed."
        },
        "shipmentDetails": {
          "$ref": "#/definitions/ShipmentDetails"
        },
        "billingDetails": {
          "$ref": "#/definitions/BillingDetails"
        },
        "orderItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderOrderItem"
          }
        }
      },
      "description": "An order."
    },
    "OrderFulfilment": {
      "type": "object",
      "properties": {
        "method": {
          "type": "string",
          "example": "FBR",
          "description": "Specifies whether this shipment has been fulfilled by the retailer (FBR) or fulfilled by bol.com (FBB). Defaults to FBR."
        },
        "distributionParty": {
          "type": "string",
          "example": "RETAILER",
          "description": "The party that manages the distribution, either bol.com or the retailer itself.",
          "enum": [
            "RETAILER",
            "BOL"
          ]
        },
        "latestDeliveryDate": {
          "type": "string",
          "format": "date",
          "example": "2017-02-10",
          "description": "The ultimate delivery date at which this order must be delivered at the customer's shipping address. This field is empty in case the exactDeliveryDate is filled."
        },
        "exactDeliveryDate": {
          "type": "string",
          "format": "date",
          "example": "2017-02-13",
          "description": "The exact delivery date at which this order must be delivered at the customer's shipping address. This field is only filled when the customer chose an exact date for delivery. This field is empty in case the latestDeliveryDate is filled."
        },
        "expiryDate": {
          "type": "string",
          "format": "date",
          "example": "2017-02-13",
          "description": "The date this order item will automatically expire and thereby cancelling this order item from the order."
        }
      }
    },
    "OrderItem": {
      "type": "object",
      "required": [
        "orderItemId"
      ],
      "properties": {
        "orderItemId": {
          "type": "string",
          "example": "2012345678",
          "description": "The id for the order item (1 order can have multiple order items).",
          "minLength": 1,
          "maxLength": 20
        }
      }
    },
    "OrderItemCancellation": {
      "type": "object",
      "required": [
        "orderItemId",
        "reasonCode"
      ],
      "properties": {
        "orderItemId": {
          "type": "string",
          "example": "2012345678",
          "description": "The id for the order item (1 order can have multiple order items)."
        },
        "reasonCode": {
          "type": "string",
          "example": "BAD_CONDITION",
          "description": "The code representing the reason for cancellation of this item.",
          "enum": [
            "OUT_OF_STOCK",
            "REQUESTED_BY_CUSTOMER",
            "BAD_CONDITION",
            "HIGHER_SHIPCOST",
            "INCORRECT_PRICE",
            "NOT_AVAIL_IN_TIME",
            "NO_BOL_GUARANTEE",
            "ORDERED_TWICE",
            "RETAIN_ITEM",
            "TECH_ISSUE",
            "UNFINDABLE_ITEM",
            "OTHER"
          ]
        }
      }
    },
    "OrderOffer": {
      "type": "object",
      "properties": {
        "offerId": {
          "type": "string",
          "example": "6ff736b5-cdd0-4150-8c67-78269ee986f5",
          "description": "Unique identifier for an offer."
        },
        "reference": {
          "type": "string",
          "example": "BOLCOM00123",
          "description": "A user-defined reference tied to the offer upon creating the offer."
        }
      }
    },
    "OrderOrderItem": {
      "type": "object",
      "properties": {
        "orderItemId": {
          "type": "string",
          "example": "2012345678",
          "description": "The id for the order item (1 order can have multiple order items)."
        },
        "cancellationRequest": {
          "type": "boolean",
          "example": false,
          "description": "Indicates whether the order was cancelled on request of the customer before the retailer has shipped it."
        },
        "fulfilment": {
          "$ref": "#/definitions/OrderFulfilment"
        },
        "offer": {
          "$ref": "#/definitions/OrderOffer"
        },
        "product": {
          "$ref": "#/definitions/OrderProduct"
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "Amount of ordered products for this order item id."
        },
        "quantityShipped": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "Amount of shipped products for this order item id."
        },
        "quantityCancelled": {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "description": "Amount of cancelled products for this order item id."
        },
        "unitPrice": {
          "type": "number",
          "example": 12.99,
          "description": "The selling price to the customer of a single unit including VAT."
        },
        "commission": {
          "type": "number",
          "example": 5.18,
          "description": "The commission for all quantities of this order item."
        },
        "additionalServices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AdditionalService"
          }
        }
      },
      "description": "Order item details from an order."
    },
    "OrderProduct": {
      "type": "object",
      "properties": {
        "ean": {
          "type": "string",
          "example": "0000007740404",
          "description": "The EAN number associated with this product."
        },
        "title": {
          "type": "string",
          "example": "Product Title",
          "description": "Title of the product as shown on the webshop."
        }
      }
    },
    "PackageRestrictions": {
      "type": "object",
      "properties": {
        "maxWeight": {
          "type": "string",
          "example": "10 kg",
          "description": "The weight of a package."
        },
        "maxDimensions": {
          "type": "string",
          "example": "10 x 10 x 10 cm",
          "description": "The dimensions of a package."
        }
      }
    },
    "PerformanceIndicator": {
      "type": "object",
      "required": [
        "details",
        "name",
        "type"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "CANCELLATIONS",
          "description": "Indicator name.",
          "enum": [
            "CANCELLATIONS",
            "FULFILMENT",
            "PHONE_AVAILABILITY",
            "RESPONSE_TIME",
            "CASE_ITEM_RATIO",
            "TRACK_AND_TRACE",
            "RETURNS",
            "REVIEWS"
          ]
        },
        "type": {
          "type": "string",
          "example": "PERCENTAGE",
          "description": "Interpretation of the data that applies to this measurement.",
          "enum": [
            "PERCENTAGE",
            "AVERAGE"
          ]
        },
        "details": {
          "description": "Details of the indicator.",
          "$ref": "#/definitions/Details"
        }
      }
    },
    "PerformanceIndicatorPeriod": {
      "type": "object",
      "required": [
        "week",
        "year"
      ],
      "properties": {
        "week": {
          "type": "string",
          "example": "05",
          "description": "Week number in the ISO-8601 standard."
        },
        "year": {
          "type": "string",
          "example": "2019",
          "description": "Year number in the ISO-8601 standard."
        }
      }
    },
    "PerformanceIndicators": {
      "type": "object",
      "required": [
        "performanceIndicators"
      ],
      "properties": {
        "performanceIndicators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PerformanceIndicator"
          }
        }
      }
    },
    "Periods": {
      "type": "object",
      "required": [
        "period"
      ],
      "properties": {
        "period": {
          "$ref": "#/definitions/OfferInsightsPeriod"
        },
        "total": {
          "type": "number",
          "format": "double",
          "example": 50.0,
          "description": "Total number of customer visits on the product page when the offer had the buy box over the requested period (excluding the current day)."
        },
        "countries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OfferInsightsCountry"
          }
        }
      }
    },
    "PickupAppointment": {
      "type": "object",
      "required": [
        "address",
        "pickupTimeSlot"
      ],
      "properties": {
        "commentToTransporter": {
          "type": "string",
          "example": "Eerste verdieping.",
          "description": "A comment to the transporter regarding the pickup appointment."
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "pickupTimeSlot": {
          "$ref": "#/definitions/ReplenishmentPickupTimeSlot"
        },
        "pickupDateTime": {
          "type": "string",
          "format": "date-time",
          "example": "2021-01-01T09:00:00+01:00",
          "description": "The date and time in ISO 8601 format when this replenishment was picked up by the transporter."
        },
        "cancellationReason": {
          "type": "string",
          "example": "NOT_AT_HOME",
          "description": "In case of a pickup cancellation this field indicates the reason for cancelling this pickup.",
          "enum": [
            "UNKNOWN_ADDRESS",
            "NOT_READY",
            "NO_LABEL",
            "WRONG_PACKAGE",
            "NOT_AT_HOME",
            "OTHER_REASON",
            "REQUEST_FROM_RETAILER"
          ]
        }
      }
    },
    "PickupTimeSlot": {
      "type": "object",
      "required": [
        "fromDateTime",
        "untilDateTime"
      ],
      "properties": {
        "fromDateTime": {
          "type": "string",
          "format": "date-time",
          "example": "2021-01-01T09:00:00+01:00",
          "description": "The available start date and time for the pickup appointment. In ISO 8601 format."
        },
        "untilDateTime": {
          "type": "string",
          "format": "date-time",
          "example": "2021-01-01T10:00:00+01:00",
          "description": "The available end date and time for the pickup appointment. In ISO 8601 format."
        }
      }
    },
    "PickupTimeSlotsAddress": {
      "type": "object",
      "required": [
        "city",
        "countryCode",
        "houseNumber",
        "streetName",
        "zipCode"
      ],
      "properties": {
        "streetName": {
          "type": "string",
          "example": "Dorpstraat",
          "description": "The street name of the pickup address.",
          "minLength": 1,
          "maxLength": 64
        },
        "houseNumber": {
          "type": "string",
          "example": "1",
          "description": "The house number of the pickup address."
        },
        "houseNumberExtension": {
          "type": "string",
          "example": "B",
          "description": "The extension of the house number.",
          "minLength": 0,
          "maxLength": 6
        },
        "zipCode": {
          "type": "string",
          "example": "1111ZZ",
          "description": "The zip code in '1234AB' format for NL and '0000' for BE addresses.",
          "minLength": 1,
          "maxLength": 8
        },
        "city": {
          "type": "string",
          "example": "Utrecht",
          "description": "The city of the pickup address.",
          "minLength": 1,
          "maxLength": 34
        },
        "countryCode": {
          "type": "string",
          "example": "NL",
          "description": "The ISO 3166-2 country code.",
          "minLength": 1,
          "maxLength": 3
        }
      }
    },
    "PickupTimeSlotsRequest": {
      "type": "object",
      "required": [
        "address",
        "numberOfLoadCarriers"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/PickupTimeSlotsAddress"
        },
        "numberOfLoadCarriers": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "The number of load carriers in this shipment.",
          "minimum": 1,
          "maximum": 50
        }
      }
    },
    "PickupTimeSlotsResponse": {
      "type": "object",
      "properties": {
        "timeSlots": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PickupTimeSlot"
          }
        }
      }
    },
    "Pricing": {
      "type": "object",
      "required": [
        "bundlePrices"
      ],
      "properties": {
        "bundlePrices": {
          "type": "array",
          "description": "A set of prices (containing a quantity and selling price) that apply to this offer.",
          "items": {
            "$ref": "#/definitions/BundlePrice"
          },
          "maxItems": 4,
          "minItems": 1
        }
      }
    },
    "Problem": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "format": "uri",
          "example": "https://api.bol.com/problems",
          "description": "Type URI for this problem. Fixed value: https://api.bol.com/problems."
        },
        "title": {
          "type": "string",
          "example": "Error validating request body. Consult the bol.com API documentation for more information.",
          "description": "Title describing the nature of the problem."
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "example": "40X",
          "description": "HTTP status returned from the endpoint causing the problem."
        },
        "detail": {
          "type": "string",
          "example": "Bad request",
          "description": "Detailed error message describing in additional detail what caused the service to return this problem."
        },
        "host": {
          "type": "string",
          "example": "Instance-001",
          "description": "Host identifier describing the server instance that reported the problem."
        },
        "instance": {
          "type": "string",
          "format": "uri",
          "example": "https://api.bol.com//retailer/resource",
          "description": "Full URI path of the resource that reported the problem."
        },
        "violations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Violation"
          }
        }
      },
      "description": "Describes a problem that occurred interacting with the API."
    },
    "ProcessStatus": {
      "type": "object",
      "required": [
        "createTimestamp",
        "description",
        "eventType",
        "links",
        "status"
      ],
      "properties": {
        "processStatusId": {
          "type": "string",
          "example": "1234567",
          "description": "The process status id."
        },
        "entityId": {
          "type": "string",
          "example": "987654321",
          "description": "The id of the object being processed. E.g. in case of a shipment process id, you will receive the id of the order item being processed."
        },
        "eventType": {
          "type": "string",
          "example": "CONFIRM_SHIPMENT",
          "description": "Name of the requested action that is being processed."
        },
        "description": {
          "type": "string",
          "example": "Example process status description for processing 987654321.",
          "description": "Describes the action that is being processed."
        },
        "status": {
          "type": "string",
          "example": "SUCCESS",
          "description": "Status of the action being processed.",
          "enum": [
            "PENDING",
            "SUCCESS",
            "FAILURE",
            "TIMEOUT"
          ]
        },
        "errorMessage": {
          "type": "string",
          "example": "Example process status error message.",
          "description": "Shows error message if applicable."
        },
        "createTimestamp": {
          "type": "string",
          "format": "date-time",
          "example": "2020-10-01T09:34:41+01:00",
          "description": "Time of creation of the response."
        },
        "links": {
          "type": "array",
          "description": "Lists available actions applicable to this endpoint.",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "ProcessStatusId": {
      "type": "object",
      "properties": {
        "processStatusId": {
          "type": "string",
          "example": "1234567",
          "description": "The process status id."
        }
      }
    },
    "ProcessStatusResponse": {
      "type": "object",
      "required": [
        "processStatuses"
      ],
      "properties": {
        "processStatuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProcessStatus"
          }
        }
      }
    },
    "ProductContent": {
      "type": "object",
      "required": [
        "attributes",
        "internalReference"
      ],
      "properties": {
        "internalReference": {
          "type": "string",
          "example": "USER-REFERENCE",
          "description": "A user defined unique reference to identify the products in the upload.",
          "minLength": 1,
          "maxLength": 30
        },
        "attributes": {
          "type": "array",
          "description": "A list of attributes.",
          "items": {
            "$ref": "#/definitions/Attribute"
          },
          "maxItems": 150,
          "minItems": 1
        }
      }
    },
    "ProductContentResponse": {
      "type": "object",
      "required": [
        "internalReference",
        "status"
      ],
      "properties": {
        "internalReference": {
          "type": "string",
          "example": "USER-REFERENCE",
          "description": "A user defined unique reference to identify the products in the upload."
        },
        "rejectedAttributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RejectedAttributeResponse"
          }
        },
        "status": {
          "type": "string",
          "example": "VALIDATED_WITH_ATTRIBUTE_FAILURES",
          "description": "The end status of the rejected attribute.",
          "enum": [
            "VALIDATED_OK",
            "VALIDATED_WITH_ATTRIBUTE_FAILURES",
            "REJECTED",
            "REJECTED_WITH_ATTRIBUTE_FAILURES"
          ]
        },
        "errorCode": {
          "type": "integer",
          "format": "int32",
          "example": 1000,
          "description": "The rejection error code."
        },
        "errorDescription": {
          "type": "string",
          "example": "Example rejection message.",
          "description": "The rejection error message explains why the value was rejected."
        }
      },
      "description": "An rejected product content."
    },
    "ProductLabelsProduct": {
      "type": "object",
      "required": [
        "quantity"
      ],
      "properties": {
        "ean": {
          "type": "string",
          "example": "0000007740404",
          "description": "The EAN number associated with this product."
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "The number of products to generate labels for.",
          "minimum": 1,
          "maximum": 9999
        }
      }
    },
    "ProductLabelsRequest": {
      "type": "object",
      "required": [
        "labelFormat",
        "products"
      ],
      "properties": {
        "labelFormat": {
          "type": "string",
          "example": "AVERY_J8159",
          "description": "The printer format to create labels for.",
          "enum": [
            "AVERY_J8159",
            "AVERY_J8160",
            "AVERY_3474",
            "DYMO_99012",
            "BROTHER_DK11208D",
            "ZEBRA_Z_PERFORM_1000T"
          ]
        },
        "products": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductLabelsProduct"
          },
          "maxItems": 250,
          "minItems": 1
        }
      }
    },
    "ReducedInvalidReplenishmentLine": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "example": "UNKNOWN_FBB_PRODUCT",
          "description": "Type of invalid replenishment line, in case the BSKU and/or EAN cannot be determined for this replenishment line.",
          "enum": [
            "UNKNOWN_FBB_PRODUCT",
            "UNKNOWN_EAN_INVENTORY_RELATION"
          ]
        }
      }
    },
    "ReducedOrder": {
      "type": "object",
      "required": [
        "orderItems"
      ],
      "properties": {
        "orderId": {
          "type": "string",
          "example": "A2K8290LP8",
          "description": "The order id."
        },
        "orderPlacedDateTime": {
          "type": "string",
          "format": "date-time",
          "example": "2017-02-09T12:39:48+01:00",
          "description": "The date and time in ISO 8601 format when the order was placed."
        },
        "orderItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReducedOrderItem"
          }
        }
      },
      "description": "An order."
    },
    "ReducedOrderItem": {
      "type": "object",
      "properties": {
        "orderItemId": {
          "type": "string",
          "example": "2012345678",
          "description": "The id for the order item (1 order can have multiple order items)."
        },
        "ean": {
          "type": "string",
          "example": "0000007740404",
          "description": "The EAN number associated with this product."
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "Amount of ordered products for this order item id."
        },
        "quantityShipped": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "Amount of shipped products for this order item id."
        },
        "quantityCancelled": {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "description": "Amount of cancelled products for this order item id."
        }
      },
      "description": "An order item."
    },
    "ReducedOrders": {
      "type": "object",
      "required": [
        "orders"
      ],
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReducedOrder"
          }
        }
      },
      "description": "Container for many orders."
    },
    "ReducedReplenishment": {
      "type": "object",
      "required": [
        "creationDateTime",
        "invalidLines",
        "lines",
        "reference",
        "replenishmentId"
      ],
      "properties": {
        "replenishmentId": {
          "type": "string",
          "example": "2312078154",
          "description": "The unique identifier of the replenishment."
        },
        "reference": {
          "type": "string",
          "example": "REFERENCE1",
          "description": "Custom user defined reference to identify the replenishment."
        },
        "creationDateTime": {
          "type": "string",
          "format": "date-time",
          "example": "2020-09-09T16:44:03+02:00",
          "description": "The date and time when this replenishment was created. In ISO 8601 format."
        },
        "lines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReducedReplenishmentLines"
          }
        },
        "invalidLines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReducedInvalidReplenishmentLine"
          }
        }
      }
    },
    "ReducedReplenishmentLines": {
      "type": "object",
      "required": [
        "ean"
      ],
      "properties": {
        "ean": {
          "type": "string",
          "example": "0000007740404",
          "description": "The EAN number associated with this product."
        }
      }
    },
    "ReducedReturn": {
      "type": "object",
      "required": [
        "fulfilmentMethod",
        "registrationDateTime",
        "returnId",
        "returnItems"
      ],
      "properties": {
        "returnId": {
          "type": "string",
          "example": "1",
          "description": "Unique identifier for a return."
        },
        "registrationDateTime": {
          "type": "string",
          "format": "date-time",
          "example": "2016-11-14T11:06:48.423+01:00",
          "description": "The date and time in ISO 8601 format when this return was registered."
        },
        "fulfilmentMethod": {
          "type": "string",
          "example": "FBR",
          "description": "Specifies whether this shipment has been fulfilled by the retailer (FBR) or fulfilled by bol.com (FBB). Defaults to FBR."
        },
        "returnItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReducedReturnItem"
          }
        }
      }
    },
    "ReducedReturnItem": {
      "type": "object",
      "required": [
        "ean",
        "expectedQuantity",
        "orderId",
        "processingResults",
        "rmaId"
      ],
      "properties": {
        "rmaId": {
          "type": "string",
          "example": "31234567",
          "description": "The RMA (Return Merchandise Authorization) id that identifies this particular return."
        },
        "orderId": {
          "type": "string",
          "example": "4012345678",
          "description": "The id of the customer order this return item is in."
        },
        "ean": {
          "type": "string",
          "example": "9789076174082",
          "description": "The EAN number associated with this product."
        },
        "expectedQuantity": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "The quantity that is expected to be returned by the customer. Note: this can be greater than 1 in case the customer ordered a quantity greater than 1 of the same product in the same customer order."
        },
        "returnReason": {
          "description": "The reason why the customer returned this product.",
          "$ref": "#/definitions/ReturnReason"
        },
        "handled": {
          "type": "boolean",
          "example": true,
          "description": "Indicates if this return item has been handled (by the retailer)."
        },
        "processingResults": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReturnProcessingResult"
          }
        }
      }
    },
    "ReducedShipment": {
      "type": "object",
      "required": [
        "order",
        "shipmentItems",
        "transport"
      ],
      "properties": {
        "shipmentId": {
          "type": "integer",
          "format": "int64",
          "example": 541757635,
          "description": "A unique identifier for this shipment."
        },
        "shipmentDateTime": {
          "type": "string",
          "format": "date-time",
          "example": "2018-04-17T10:55:37+02:00",
          "description": "The date and time in ISO 8601 format when the order item was shipped."
        },
        "shipmentReference": {
          "type": "string",
          "example": "BOLCOM001",
          "description": "Reference supplied by the user when this item was shipped."
        },
        "order": {
          "$ref": "#/definitions/ReducedShipmentOrder"
        },
        "shipmentItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReducedShipmentItem"
          }
        },
        "transport": {
          "$ref": "#/definitions/ReducedTransport"
        }
      }
    },
    "ReducedShipmentItem": {
      "type": "object",
      "properties": {
        "orderItemId": {
          "type": "string",
          "example": "1234567891",
          "description": "A unique identifier for the item of the order that was shipped in this shipment."
        },
        "ean": {
          "type": "string",
          "example": "0000007740404",
          "description": "The EAN number associated with this product."
        }
      }
    },
    "ReducedShipmentOrder": {
      "type": "object",
      "properties": {
        "orderId": {
          "type": "string",
          "example": "4123456789",
          "description": "A unique identifier for the order this shipment is related to."
        },
        "orderPlacedDateTime": {
          "type": "string",
          "format": "date-time",
          "example": "2018-04-17T10:55:37+02:00",
          "description": "The date and time in ISO 8601 format when the order was placed."
        }
      }
    },
    "ReducedTransport": {
      "type": "object",
      "properties": {
        "transportId": {
          "type": "integer",
          "format": "int64",
          "example": 312778947,
          "description": "The transport id."
        }
      }
    },
    "Reduction": {
      "type": "object",
      "required": [
        "costReduction",
        "endDate",
        "maximumPrice",
        "startDate"
      ],
      "properties": {
        "maximumPrice": {
          "type": "number",
          "example": 60.0,
          "description": "Maximum offer price that can be used to benefit from a commission reduction, including VAT."
        },
        "costReduction": {
          "type": "number",
          "example": 2.99,
          "description": "A reduction to the commission if the maximum price criteria is met, including VAT."
        },
        "startDate": {
          "type": "string",
          "format": "date",
          "example": "2018-01-01",
          "description": "The start date from which the commission reduction is valid, in ISO 8601 format."
        },
        "endDate": {
          "type": "string",
          "format": "date",
          "example": "2018-01-30",
          "description": "The end date from which the commission reduction is not valid anymore, in ISO 8601 format."
        }
      }
    },
    "RejectedAttributeResponse": {
      "type": "object",
      "required": [
        "attributeId",
        "rejectionErrors"
      ],
      "properties": {
        "attributeId": {
          "type": "string",
          "example": "Width",
          "description": "Identifier of the attribute from the data model."
        },
        "rejectionErrors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RejectionError"
          }
        }
      },
      "description": "An rejected attribute."
    },
    "RejectionError": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "example": 1000,
          "description": "The rejection error code."
        },
        "message": {
          "type": "string",
          "example": "Example rejection message.",
          "description": "The rejection error message explains why the value was rejected."
        }
      }
    },
    "RelatedSearchTerm": {
      "type": "object",
      "required": [
        "searchTerm",
        "total"
      ],
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32",
          "example": 100,
          "description": "The number of customer visits on the search page."
        },
        "searchTerm": {
          "type": "string",
          "example": "book",
          "description": "The search term for which you requested the search volume."
        }
      }
    },
    "ReplenishmentLine": {
      "type": "object",
      "required": [
        "ean",
        "lineState",
        "quantityAnnounced",
        "quantityInProgress",
        "quantityReceived",
        "quantityWithGradedState",
        "quantityWithRegularState"
      ],
      "properties": {
        "ean": {
          "type": "string",
          "example": "0000007740404",
          "description": "The EAN number associated with this product."
        },
        "lineState": {
          "type": "string",
          "example": "ANNOUNCED",
          "description": "The state of the line indicating whether this line was announced within this replenishment.",
          "enum": [
            "ANNOUNCED",
            "UNANNOUNCED",
            "UNKNOWN"
          ]
        },
        "quantityAnnounced": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "The amount of announced quantity for this replenishment line."
        },
        "quantityReceived": {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "description": "The amount of received quantity for this replenishment line."
        },
        "quantityInProgress": {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "description": "The amount of quantity that is still in progress at the warehouse for this replenishment line."
        },
        "quantityWithGradedState": {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "description": "The quantity within this shipment line that has a graded (unsalable) state."
        },
        "quantityWithRegularState": {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "description": "The quantity within this shipment line that has a regular (salable) state."
        }
      }
    },
    "ReplenishmentPickupTimeSlot": {
      "type": "object",
      "required": [
        "fromDateTime",
        "untilDateTime"
      ],
      "properties": {
        "fromDateTime": {
          "type": "string",
          "format": "date-time",
          "example": "2021-01-01T09:00:00+01:00",
          "description": "The selected start date and time for the replenishment pickup appointment. In ISO 8601 format."
        },
        "untilDateTime": {
          "type": "string",
          "format": "date-time",
          "example": "2021-01-01T10:00:00+01:00",
          "description": "The selected end date and time for the replenishment pickup appointment. In ISO 8601 format."
        }
      }
    },
    "ReplenishmentResponse": {
      "type": "object",
      "required": [
        "creationDateTime",
        "deliveryInformation",
        "invalidLines",
        "labelingByBol",
        "lines",
        "loadCarriers",
        "reference",
        "replenishmentId",
        "state",
        "stateTransitions"
      ],
      "properties": {
        "replenishmentId": {
          "type": "string",
          "example": "2312078154",
          "description": "The unique identifier of the replenishment."
        },
        "creationDateTime": {
          "type": "string",
          "format": "date-time",
          "example": "2021-01-01T08:00:00+01:00",
          "description": "The date and time when this replenishment was created. In ISO 8601 format."
        },
        "reference": {
          "type": "string",
          "example": "REFERENCE1",
          "description": "Custom user defined reference to identify the replenishment."
        },
        "labelingByBol": {
          "type": "boolean",
          "example": false,
          "description": "Indicates whether the replenishment will be labeled by bol.com or not."
        },
        "state": {
          "type": "string",
          "example": "ANNOUNCED",
          "description": "Indicates the state of this replenishment order.",
          "enum": [
            "ANNOUNCED",
            "IN_TRANSIT",
            "ARRIVED_AT_WH",
            "IN_PROGRESS_AT_WH",
            "CANCELLED",
            "DONE"
          ]
        },
        "deliveryInformation": {
          "$ref": "#/definitions/DeliveryInformation"
        },
        "pickupAppointment": {
          "$ref": "#/definitions/PickupAppointment"
        },
        "numberOfLoadCarriers": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "The number of load carriers in this shipment."
        },
        "loadCarriers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LoadCarrier"
          }
        },
        "lines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReplenishmentLine"
          }
        },
        "invalidLines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InvalidReplenishmentLine"
          }
        },
        "stateTransitions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StateTransition"
          }
        }
      }
    },
    "ReplenishmentsResponse": {
      "type": "object",
      "required": [
        "replenishments"
      ],
      "properties": {
        "replenishments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReducedReplenishment"
          }
        }
      }
    },
    "RetailerOffer": {
      "type": "object",
      "required": [
        "condition",
        "ean",
        "fulfilment",
        "notPublishableReasons",
        "offerId",
        "onHoldByRetailer",
        "pricing",
        "stock",
        "store"
      ],
      "properties": {
        "offerId": {
          "type": "string",
          "example": "6ff736b5-cdd0-4150-8c67-78269ee986f5",
          "description": "Unique identifier for an offer."
        },
        "ean": {
          "type": "string",
          "example": "0000007740404",
          "description": "The EAN number associated with this product. Note: in case an ISBN is provided, the ISBN will be replaced with the actual EAN belonging to this ISBN."
        },
        "reference": {
          "type": "string",
          "example": "REF12345",
          "description": "A user-defined reference that helps you identify this particular offer when receiving data from us. This element can optionally be left empty and has a maximum amount of 20 characters."
        },
        "onHoldByRetailer": {
          "type": "boolean",
          "example": false,
          "description": "Indicates whether or not you want to put this offer for sale on the bol.com website. Defaults to false."
        },
        "unknownProductTitle": {
          "type": "string",
          "example": "Unknown Product Title",
          "description": "In case the item is not known to bol.com you can use this field to identify this particular product. Note: in case the product is known to bol.com, the unknown product title will not be stored."
        },
        "pricing": {
          "$ref": "#/definitions/Pricing"
        },
        "stock": {
          "$ref": "#/definitions/Stock"
        },
        "fulfilment": {
          "$ref": "#/definitions/Fulfilment"
        },
        "store": {
          "$ref": "#/definitions/Store"
        },
        "condition": {
          "$ref": "#/definitions/Condition"
        },
        "notPublishableReasons": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotPublishableReason"
          }
        }
      }
    },
    "_Return": {
      "type": "object",
      "required": [
        "fulfilmentMethod",
        "registrationDateTime",
        "returnId",
        "returnItems"
      ],
      "properties": {
        "returnId": {
          "type": "string",
          "example": "1",
          "description": "Unique identifier for a return."
        },
        "registrationDateTime": {
          "type": "string",
          "format": "date-time",
          "example": "2016-11-14T11:06:48.423+01:00",
          "description": "The date and time in ISO 8601 format when this return was registered."
        },
        "fulfilmentMethod": {
          "type": "string",
          "example": "FBR",
          "description": "Specifies whether this shipment has been fulfilled by the retailer (FBR) or fulfilled by bol.com (FBB). Defaults to FBR."
        },
        "returnItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReturnItem"
          }
        }
      }
    },
    "ReturnItem": {
      "type": "object",
      "required": [
        "customerDetails",
        "ean",
        "expectedQuantity",
        "handled",
        "orderId",
        "processingResults",
        "rmaId",
        "title"
      ],
      "properties": {
        "rmaId": {
          "type": "string",
          "example": "31234567",
          "description": "The RMA (Return Merchandise Authorization) id that identifies this particular return."
        },
        "orderId": {
          "type": "string",
          "example": "4012345678",
          "description": "The id of the customer order this return item is in."
        },
        "ean": {
          "type": "string",
          "example": "9789076174082",
          "description": "The EAN number associated with this product."
        },
        "title": {
          "type": "string",
          "example": "Harry Potter en de steen der wijzen",
          "description": "The product title."
        },
        "expectedQuantity": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "The quantity that is expected to be returned by the customer. Note: this can be greater than 1 in case the customer ordered a quantity greater than 1 of the same product in the same customer order."
        },
        "returnReason": {
          "description": "The reason why the customer returned this product.",
          "$ref": "#/definitions/ReturnReason"
        },
        "trackAndTrace": {
          "type": "string",
          "example": "3SBOL0987654321",
          "description": "The track and trace code that is associated with this transport."
        },
        "transporterName": {
          "type": "string",
          "example": "PostNL",
          "description": "The name of the transporter."
        },
        "handled": {
          "type": "boolean",
          "example": true,
          "description": "Indicates if this return item has been handled (by the retailer)."
        },
        "processingResults": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReturnProcessingResult"
          }
        },
        "customerDetails": {
          "description": "Information related to the customer.",
          "$ref": "#/definitions/CustomerDetails"
        }
      }
    },
    "ReturnProcessingResult": {
      "type": "object",
      "required": [
        "handlingResult",
        "processingDateTime",
        "processingResult",
        "quantity"
      ],
      "properties": {
        "quantity": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "The processed quantity."
        },
        "processingResult": {
          "type": "string",
          "example": "ACCEPTED",
          "description": "The processing result of the return."
        },
        "handlingResult": {
          "type": "string",
          "example": "RETURN_RECEIVED",
          "description": "The handling result requested by the retailer."
        },
        "processingDateTime": {
          "type": "string",
          "format": "date-time",
          "example": "2018-04-17T10:55:37+02:00",
          "description": "The date and time in ISO 8601 format when the return was processed."
        }
      }
    },
    "ReturnReason": {
      "type": "object",
      "properties": {
        "mainReason": {
          "type": "string",
          "example": "Niet naar verwachting",
          "description": "The main reason describing why the customer returned this product."
        },
        "detailedReason": {
          "type": "string",
          "example": "Niet naar verwachting",
          "description": "The sub reason describing why the customer returned this product in more detail."
        },
        "customerComments": {
          "type": "string",
          "example": "Lorem Ipsum",
          "description": "Additional details from the customer as to why this item was returned."
        }
      }
    },
    "ReturnRequest": {
      "type": "object",
      "required": [
        "quantityReturned"
      ],
      "properties": {
        "handlingResult": {
          "type": "string",
          "example": "RETURN_RECEIVED",
          "enum": [
            "RETURN_RECEIVED",
            "EXCHANGE_PRODUCT",
            "RETURN_DOES_NOT_MEET_CONDITIONS",
            "REPAIR_PRODUCT",
            "CUSTOMER_KEEPS_PRODUCT_PAID",
            "STILL_APPROVED"
          ]
        },
        "quantityReturned": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "minimum": 1,
          "maximum": 9999
        }
      }
    },
    "ReturnsResponse": {
      "type": "object",
      "required": [
        "returns"
      ],
      "properties": {
        "returns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReducedReturn"
          }
        }
      }
    },
    "SalesForecastPeriod": {
      "type": "object",
      "required": [
        "countries",
        "total",
        "weeksAhead"
      ],
      "properties": {
        "weeksAhead": {
          "type": "integer",
          "format": "int32",
          "example": 2,
          "description": "The number of weeks into the future, starting from today."
        },
        "total": {
          "$ref": "#/definitions/Total"
        },
        "countries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Countries"
          }
        }
      }
    },
    "SalesForecastResponse": {
      "type": "object",
      "required": [
        "countries",
        "name",
        "periods",
        "total",
        "type"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "SALES_FORECAST",
          "description": "Indicator name."
        },
        "type": {
          "type": "string",
          "example": "DECIMAL",
          "description": "Interpretation of the data that applies to this measurement."
        },
        "total": {
          "$ref": "#/definitions/Total"
        },
        "countries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Countries"
          }
        },
        "periods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SalesForecastPeriod"
          }
        }
      }
    },
    "Score": {
      "type": "object",
      "required": [
        "conforms",
        "denominator",
        "distanceToNorm",
        "numerator",
        "value"
      ],
      "properties": {
        "conforms": {
          "type": "boolean",
          "example": true,
          "description": "Indicates whether the score conforms to the bol.com service norm or not."
        },
        "numerator": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "The top part of the fraction (above the line). This usually is the smaller number compared to the denominator."
        },
        "denominator": {
          "type": "integer",
          "format": "int32",
          "example": 5,
          "description": "The lower part of the fraction (below the line). This usually is the larger number compared to the the numerator."
        },
        "value": {
          "type": "number",
          "format": "float",
          "example": 0.5,
          "description": "The score for this measurement (denominator divided by the numerator)."
        },
        "distanceToNorm": {
          "type": "number",
          "format": "float",
          "example": 0.1,
          "description": "The difference between the score and the bol.com service norm."
        }
      },
      "description": "The score for this measurement. In case there are no scores for an indicator, this element is omitted from the response."
    },
    "SearchTerm": {
      "type": "object",
      "required": [
        "countries",
        "periods",
        "searchTerm",
        "total",
        "type"
      ],
      "properties": {
        "searchTerm": {
          "type": "string",
          "example": "book",
          "description": "The search term for which you requested the search volume."
        },
        "type": {
          "type": "string",
          "example": "count",
          "description": "Interpretation of the data that applies to this measurement."
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "example": 100,
          "description": "The number of customer visits on the search page."
        },
        "countries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchTermsCountry"
          }
        },
        "periods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TotalPeriod"
          }
        },
        "relatedSearchTerms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedSearchTerm"
          }
        }
      }
    },
    "SearchTerms": {
      "type": "object",
      "properties": {
        "searchTerms": {
          "$ref": "#/definitions/SearchTerm"
        }
      }
    },
    "SearchTermsCountry": {
      "type": "object",
      "required": [
        "countryCode",
        "value"
      ],
      "properties": {
        "countryCode": {
          "type": "string",
          "example": "NL",
          "description": "Countries in which this offer is currently on sale in the webshop in ISO-3166-1 format."
        },
        "value": {
          "type": "integer",
          "format": "int32",
          "example": 100,
          "description": "The number of customer visits on the search page."
        }
      }
    },
    "SearchTermsPeriod": {
      "type": "object",
      "properties": {
        "day": {
          "type": "string",
          "example": "19",
          "description": "Day number in the ISO-8601 standard."
        },
        "week": {
          "type": "string",
          "example": "41",
          "description": "Week number in the ISO-8601 standard."
        },
        "month": {
          "type": "string",
          "example": "11",
          "description": "Month number in the ISO-8601 standard."
        },
        "year": {
          "type": "string",
          "example": "2020",
          "description": "Year number in the ISO-8601 standard."
        }
      }
    },
    "Shipment": {
      "type": "object",
      "required": [
        "order",
        "shipmentItems"
      ],
      "properties": {
        "shipmentId": {
          "type": "integer",
          "format": "int64",
          "example": 541757635,
          "description": "A unique identifier for this shipment."
        },
        "shipmentDateTime": {
          "type": "string",
          "format": "date-time",
          "example": "2018-04-17T10:55:37+02:00",
          "description": "The date and time in ISO 8601 format when the order item was shipped."
        },
        "shipmentReference": {
          "type": "string",
          "example": "BOLCOM001",
          "description": "Reference supplied by the user when this item was shipped."
        },
        "pickupPoint": {
          "type": "boolean",
          "example": true,
          "description": "Indicates whether this order is shipped to a Pick Up Point."
        },
        "order": {
          "$ref": "#/definitions/ShipmentOrder"
        },
        "shipmentDetails": {
          "$ref": "#/definitions/ShipmentDetails"
        },
        "billingDetails": {
          "$ref": "#/definitions/BillingDetails"
        },
        "shipmentItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ShipmentItem"
          }
        },
        "transport": {
          "$ref": "#/definitions/ShipmentTransport"
        }
      }
    },
    "ShipmentDetails": {
      "type": "object",
      "properties": {
        "pickupPointName": {
          "type": "string",
          "example": "Albert Heijn: UTRECHT",
          "description": "The name of Pick Up Point location this order needs to be shipped to."
        },
        "salutation": {
          "type": "string",
          "example": "MALE",
          "description": "The salutation of the customer.",
          "enum": [
            "MALE",
            "FEMALE",
            "UNKNOWN"
          ]
        },
        "firstName": {
          "type": "string",
          "example": "Billie",
          "description": "The first name of the customer."
        },
        "surname": {
          "type": "string",
          "example": "Jansen",
          "description": "The surname of the customer."
        },
        "streetName": {
          "type": "string",
          "example": "Dorpstraat",
          "description": "The street name."
        },
        "houseNumber": {
          "type": "string",
          "example": "1",
          "description": "The house number."
        },
        "houseNumberExtension": {
          "type": "string",
          "example": "B",
          "description": "The extension on the house number."
        },
        "extraAddressInformation": {
          "type": "string",
          "example": "Apartment",
          "description": "Additional information related to the address that helps in delivering the package."
        },
        "zipCode": {
          "type": "string",
          "example": "1111ZZ",
          "description": "The ZIP code in '1234AB' format for NL orders and '0000' format for BE orders."
        },
        "city": {
          "type": "string",
          "example": "Utrecht",
          "description": "The name of the city."
        },
        "countryCode": {
          "type": "string",
          "example": "NL",
          "description": "The country code."
        },
        "email": {
          "type": "string",
          "example": "billie@verkopen.bol.com",
          "description": "A scrambled email address that can be used to contact the customer."
        },
        "company": {
          "type": "string",
          "example": "bol.com",
          "description": "The company name."
        },
        "deliveryPhoneNumber": {
          "type": "string",
          "example": "012123456",
          "description": "The delivery phone number of the customer. Filled in case the order requires an appointment for delivering the goods."
        },
        "language": {
          "type": "string",
          "example": "nl",
          "description": "The language of the customer in case of contact.",
          "enum": [
            "nl",
            "nl-BE",
            "fr",
            "fr-BE"
          ]
        }
      },
      "description": "The address details where this order needs to be shipped to. This can be the customers' own address, a (company) business address or a Pick Up Point address."
    },
    "ShipmentFulfilment": {
      "type": "object",
      "properties": {
        "method": {
          "type": "string",
          "example": "FBR",
          "description": "Specifies whether this shipment has been fulfilled by the retailer (FBR) or fulfilled by bol.com (FBB). Defaults to FBR.",
          "enum": [
            "FBR",
            "FBB"
          ]
        },
        "distributionParty": {
          "type": "string",
          "example": "RETAILER",
          "description": "The party that manages the distribution, either bol.com or the retailer itself.",
          "enum": [
            "RETAILER",
            "BOL"
          ]
        },
        "latestDeliveryDate": {
          "type": "string",
          "format": "date",
          "example": "2017-02-10",
          "description": "The ultimate delivery date at which this order must be delivered at the customer's shipping address. This field is empty in case the exactDeliveryDate is filled."
        }
      }
    },
    "ShipmentItem": {
      "type": "object",
      "properties": {
        "orderItemId": {
          "type": "string",
          "example": "1234567891",
          "description": "A unique identifier for the item of the order that was shipped in this shipment."
        },
        "fulfilment": {
          "$ref": "#/definitions/ShipmentFulfilment"
        },
        "offer": {
          "$ref": "#/definitions/OrderOffer"
        },
        "product": {
          "$ref": "#/definitions/OrderProduct"
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "Amount of the product being ordered."
        },
        "unitPrice": {
          "type": "number",
          "example": 12.99,
          "description": "The selling price to the customer of a single unit including VAT."
        },
        "commission": {
          "type": "number",
          "example": 5.0,
          "description": "The commission."
        }
      }
    },
    "ShipmentOrder": {
      "type": "object",
      "properties": {
        "orderId": {
          "type": "string",
          "example": "4123456789",
          "description": "A unique identifier for the order this shipment is related to."
        },
        "orderPlacedDateTime": {
          "type": "string",
          "format": "date-time",
          "example": "2018-04-17T10:55:37+02:00",
          "description": "The date and time in ISO 8601 format when the order was placed."
        }
      }
    },
    "ShipmentRequest": {
      "type": "object",
      "required": [
        "orderItems"
      ],
      "properties": {
        "orderItems": {
          "type": "array",
          "description": "List of order items to ship. Order item id's must belong to the same order.",
          "items": {
            "$ref": "#/definitions/OrderItem"
          },
          "maxItems": 1,
          "minItems": 1
        },
        "shipmentReference": {
          "type": "string",
          "example": "B321SR",
          "description": "A user-defined reference that you can provide to add to the shipment. Can be used for own administration purposes.",
          "minLength": 0,
          "maxLength": 90
        },
        "shippingLabelId": {
          "type": "string",
          "example": "d4c50077-0c19-435f-9bee-1b30b9f4ba1a",
          "description": "The identifier of the purchased shipping label."
        },
        "transport": {
          "$ref": "#/definitions/TransportInstruction"
        }
      }
    },
    "ShipmentTransport": {
      "type": "object",
      "properties": {
        "transportId": {
          "type": "integer",
          "format": "int64",
          "example": 312778947,
          "description": "The transport id."
        },
        "transporterCode": {
          "type": "string",
          "example": "TNT",
          "description": "Specify the transporter that will carry out the shipment."
        },
        "trackAndTrace": {
          "type": "string",
          "example": "3SBOL0987654321",
          "description": "The track and trace code that is associated with this transport."
        },
        "shippingLabelId": {
          "type": "string",
          "example": "123456789",
          "description": "The shipping label id."
        }
      }
    },
    "ShipmentsResponse": {
      "type": "object",
      "required": [
        "shipments"
      ],
      "properties": {
        "shipments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReducedShipment"
          }
        }
      }
    },
    "ShippingLabelRequest": {
      "type": "object",
      "required": [
        "orderItems",
        "shippingLabelOfferId"
      ],
      "properties": {
        "orderItems": {
          "type": "array",
          "description": "Order items for which the delivery options are requested.",
          "items": {
            "$ref": "#/definitions/OrderItem"
          }
        },
        "shippingLabelOfferId": {
          "type": "string",
          "example": "027b79fa-5743-40f0-94c7-0eac761af611",
          "description": "Shipping label offer id for which you request a shipping label."
        }
      },
      "description": "The configuration of order items to get delivery options for."
    },
    "StateTransition": {
      "type": "object",
      "required": [
        "state",
        "stateDateTime"
      ],
      "properties": {
        "state": {
          "type": "string",
          "example": "ANNOUNCED",
          "description": "Indicates the state of this replenishment order.",
          "enum": [
            "DRAFT",
            "ANNOUNCED",
            "IN_TRANSIT",
            "ARRIVED_AT_WH",
            "IN_PROGRESS_AT_WH",
            "CANCELLED",
            "DONE"
          ]
        },
        "stateDateTime": {
          "type": "string",
          "format": "date-time",
          "example": "2021-01-02T09:00:00+01:00",
          "description": "The date and time in ISO 8601 format that indicates when this states was updated for this replenishment."
        }
      }
    },
    "Stock": {
      "type": "object",
      "required": [
        "managedByRetailer"
      ],
      "properties": {
        "amount": {
          "type": "integer",
          "format": "int32",
          "example": 6,
          "description": "The amount of stock available for the specified product present in the retailers warehouse. Note: this should not be the FBB stock! Defaults to 0."
        },
        "correctedStock": {
          "type": "integer",
          "format": "int32",
          "example": 5,
          "description": "The amount of items in stock minus handled order and minus open orders. As compared to the stock you sent us. When this reaches zero, your offer will not be for sale on the shop."
        },
        "managedByRetailer": {
          "type": "boolean",
          "example": false,
          "description": "Configures whether the retailer manages the stock levels or that bol.com should calculate the corrected stock based on actual open orders. In case the configuration is set to 'false', all open orders are used to calculate the corrected stock. In case the configuration is set to 'true', only orders that are placed after the last offer update are taken into account."
        }
      }
    },
    "StockCreate": {
      "type": "object",
      "required": [
        "amount",
        "managedByRetailer"
      ],
      "properties": {
        "amount": {
          "type": "integer",
          "format": "int32",
          "example": 6,
          "description": "The amount of stock available for the specified product present in the retailers warehouse. Note: this should not be the FBB stock! Defaults to 0.",
          "minimum": 0,
          "maximum": 999
        },
        "managedByRetailer": {
          "type": "boolean",
          "example": false,
          "description": "Configures whether the retailer manages the stock levels or that bol.com should calculate the corrected stock based on actual open orders. In case the configuration is set to 'false', all open orders are used to calculate the corrected stock. In case the configuration is set to 'true', only orders that are placed after the last offer update are taken into account."
        }
      }
    },
    "Store": {
      "type": "object",
      "required": [
        "visible"
      ],
      "properties": {
        "productTitle": {
          "type": "string",
          "example": "Product Title",
          "description": "The product title for the product associated with this offer."
        },
        "visible": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CountryCode"
          }
        }
      }
    },
    "SubscriptionResponse": {
      "type": "object",
      "required": [
        "id",
        "resources",
        "url"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "1234",
          "description": "A unique identifier for the subscription."
        },
        "resources": {
          "type": "array",
          "example": "['PROCESS_STATUS']",
          "description": "Type of event.",
          "items": {
            "type": "string"
          }
        },
        "url": {
          "type": "string",
          "example": "https://www.bol.com/webhook",
          "description": "URL to receive this WebHook notification."
        }
      }
    },
    "SubscriptionsResponse": {
      "type": "object",
      "required": [
        "subscriptions"
      ],
      "properties": {
        "subscriptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubscriptionResponse"
          }
        }
      }
    },
    "Total": {
      "type": "object",
      "required": [
        "maximum",
        "minimum"
      ],
      "properties": {
        "minimum": {
          "type": "number",
          "format": "double",
          "example": 10.5,
          "description": "Minimum number of estimated sales expectations on the bol.com platform."
        },
        "maximum": {
          "type": "number",
          "format": "double",
          "example": 20.5,
          "description": "Maximum number of estimated sales expectations on the bol.com platform."
        }
      }
    },
    "TotalPeriod": {
      "type": "object",
      "required": [
        "countries",
        "period",
        "total"
      ],
      "properties": {
        "period": {
          "$ref": "#/definitions/SearchTermsPeriod"
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "example": 100,
          "description": "The number of customer visits on the search page."
        },
        "countries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchTermsCountry"
          }
        }
      }
    },
    "TransportInstruction": {
      "type": "object",
      "properties": {
        "transporterCode": {
          "type": "string",
          "example": "TNT",
          "description": "Specify the transporter that will carry out the shipment."
        },
        "trackAndTrace": {
          "type": "string",
          "example": "3SBOL0987654321",
          "description": "The track and trace code that is associated with this transport."
        }
      }
    },
    "UpdateDeliveryInfo": {
      "type": "object",
      "properties": {
        "expectedDeliveryDate": {
          "type": "string",
          "example": "2021-01-01",
          "description": "The expected delivery date of the shipment at the bol.com warehouse. In ISO 8601 format."
        }
      }
    },
    "UpdateLoadCarrier": {
      "type": "object",
      "properties": {
        "sscc": {
          "type": "string",
          "example": "020001200000007000",
          "description": "The Serial Shipping Container Code (SSCC) for this load carrier."
        }
      }
    },
    "UpdateOfferPriceRequest": {
      "type": "object",
      "required": [
        "pricing"
      ],
      "properties": {
        "pricing": {
          "$ref": "#/definitions/Pricing"
        }
      }
    },
    "UpdateOfferRequest": {
      "type": "object",
      "required": [
        "fulfilment"
      ],
      "properties": {
        "reference": {
          "type": "string",
          "example": "REF12345",
          "description": "A user-defined reference that helps you identify this particular offer when receiving data from us. This element can optionally be left empty and has a maximum amount of 20 characters.",
          "minLength": 0,
          "maxLength": 20
        },
        "onHoldByRetailer": {
          "type": "boolean",
          "example": false,
          "description": "Indicates whether or not you want to put this offer for sale on the bol.com website. Defaults to false."
        },
        "unknownProductTitle": {
          "type": "string",
          "example": "Unknown Product Title",
          "description": "In case the item is not known to bol.com you can use this field to identify this particular product. Note: in case the product is known to bol.com, the unknown product title will not be stored.",
          "minLength": 0,
          "maxLength": 500
        },
        "fulfilment": {
          "$ref": "#/definitions/Fulfilment"
        }
      }
    },
    "UpdateOfferStockRequest": {
      "type": "object",
      "required": [
        "amount",
        "managedByRetailer"
      ],
      "properties": {
        "amount": {
          "type": "integer",
          "format": "int32",
          "example": 6,
          "description": "The amount of stock available for the specified product present in the retailers warehouse. Note: this should not be the FBB stock! Defaults to 0.",
          "minimum": 0,
          "maximum": 999
        },
        "managedByRetailer": {
          "type": "boolean",
          "example": false,
          "description": "Configures whether the retailer manages the stock levels or that bol.com should calculate the corrected stock based on actual open orders. In case the configuration is set to 'false', all open orders are used to calculate the corrected stock. In case the configuration is set to 'true', only orders that are placed after the last offer update are taken into account."
        }
      }
    },
    "UpdateReplenishmentRequest": {
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "example": "CANCELLED",
          "description": "Update the state of the replenishment to cancel the replenishment.",
          "enum": [
            "CANCELLED"
          ]
        },
        "deliveryInfo": {
          "$ref": "#/definitions/UpdateDeliveryInfo"
        },
        "numberOfLoadCarriers": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "The number of parcels in this replenishment. Note: for first mile this is only a maximum of 20 load carriers.",
          "minimum": 1,
          "maximum": 50
        },
        "loadCarriers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UpdateLoadCarrier"
          },
          "maxItems": 50,
          "minItems": 1
        }
      }
    },
    "UpdateSubscriptionRequest": {
      "type": "object",
      "required": [
        "resources",
        "url"
      ],
      "properties": {
        "resources": {
          "type": "array",
          "example": "['PROCESS_STATUS']",
          "description": "Type of event.",
          "items": {
            "type": "string",
            "enum": [
              "PROCESS_STATUS"
            ]
          }
        },
        "url": {
          "type": "string",
          "example": "https://www.bol.com/webhook",
          "description": "URL to receive this WebHook notification.",
          "pattern": "^https.*"
        }
      }
    },
    "ValidationReportResponse": {
      "type": "object",
      "properties": {
        "productContents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductContentResponse"
          }
        }
      },
      "description": "Validation report."
    },
    "Violation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "exampleValue",
          "description": "Describes the origin of the error, for instance a field or query parameter validation error."
        },
        "reason": {
          "type": "string",
          "example": "Request contains invalid value(s): 'INVALID', allowed values: ALLOWED_VALUE1, ALLOWED_VALUE2.",
          "description": "Detailed description of the validation error that caused the problem."
        }
      },
      "description": "Describes a violation that occurred interacting with the API."
    }
  }
}